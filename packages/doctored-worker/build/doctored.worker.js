!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=1)}([function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}u((n=n.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var o,a,s=r(2),u=[],h=[],f=[];function c(t){for(var e=t;e--;e>=0){var r=f[e];if(void 0!==r)return r.map((function(t){var e=u[t];if(e[0]!==l.Element)throw Error("Parent node not element. Fatal error. Bye!");return e}))}return[]}self.onmessage=function(t){var e=t.data;switch(e.type){case"init-doc":!function(t,e){n(this,void 0,void 0,(function(){var r,n;return i(this,(function(i){switch(i.label){case 0:return r=new URL("./sax-wasm.wasm",e.location).toString(),a=new s.SAXParser(s.SaxEventType.OpenTagStart|s.SaxEventType.Attribute|s.SaxEventType.Text|s.SaxEventType.CloseTag),[4,fetch(r)];case 1:return[4,i.sent().arrayBuffer()];case 2:return n=i.sent(),[4,a.prepareWasm(new Uint8Array(n))];case 3:return i.sent()?(a.eventHandler=function(t,e){switch(t){case s.SaxEventType.OpenTagStart:o=[1,e.name],u.push(o),e.selfClosing?u.push([l.CloseElement]):h.push(u.length-1);break;case s.SaxEventType.Attribute:if(!o)throw console.error("Attribute node received without lastItem. Huh?",e),new Error;void 0===o[p]&&(o[p]={}),o[p][e.name]=e.value;break;case s.SaxEventType.CloseTag:u.push([l.CloseElement]),h.pop();break;case s.SaxEventType.Text:u.push([l.Text,e.value]),o=void 0;break;default:console.log("SAX EVENT",t,s.SaxEventType.OpenTag,s.SaxEventType.OpenTagStart,s.SaxEventType.Attribute,s.SaxEventType.CloseTag,JSON.parse(JSON.stringify(e)))}u[u.length-1][0]===l.Element&&f.push(h.slice())},t.postMessage({type:"doc-ready"})):t.postMessage({type:"doc-failure",reason:"Unable to parser.prepareWasm"}),[2]}}))}))}(self,e);break;case"load-source":!function(t,e){n(this,void 0,void 0,(function(){var r,n,o,s,h,f,c,l;return i(this,(function(i){switch(i.label){case 0:console.log("Loading...",e.url),i.label=1;case 1:return i.trys.push([1,6,,7]),[4,fetch(e.url)];case 2:if(r=i.sent(),n=parseInt(r.headers.get("Content-Length")||"-1",10),t.postMessage({type:"loading",url:e.url,contentLengthBytes:n,nodesLength:u.length}),!r||!r.body)throw Error("Fetch error. Response type = "+typeof r);o=0,s=r.body.getReader(),i.label=3;case 3:return[4,s.read()];case 4:if((h=i.sent()).done)return a.end(),[3,5];for(f=0;f<h.value.length;)c=h.value.slice(f,f+1024),a.write(c),f+=1024;return o+=h.value?h.value.length:0,t.postMessage({type:"loading",url:e.url,contentLengthBytes:n,loadedLengthBytes:o,nodesLength:u.length}),[3,3];case 5:return t.postMessage({type:"loaded",url:e.url,contentLengthBytes:n,loadedLengthBytes:o,nodesLength:u.length}),[3,7];case 6:return l=i.sent(),console.log("fetch load error",l,l.stack),[3,7];case 7:return[2]}}))}))}(self,e);break;case"get-range/request":!function(t,e){t.postMessage({type:"get-range/response",parents:c(e.startIndex),startIndex:e.startIndex,endIndex:e.endIndex,nodes:u.slice(e.startIndex,e.endIndex)})}(self,e);break;case"cancel":break;default:throw Error("Unrecognised message "+JSON.stringify(e))}};var l,p=2;e.NodeTypeId={Element:1,Text:3,CloseElement:20},function(t){t[t.Element=1]="Element",t[t.Text=3]="Text",t[t.CloseElement=20]="CloseElement"}(l||(l={}))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(3))},function(t,e,r){"use strict";(function(t,r){Object.defineProperty(e,"__esModule",{value:!0});class n{}e.SaxEventType=n,n.Text=1,n.ProcessingInstruction=2,n.SGMLDeclaration=4,n.Doctype=8,n.Comment=16,n.OpenTagStart=32,n.Attribute=64,n.OpenTag=128,n.CloseTag=256,n.OpenCDATA=512,n.Cdata=1024,n.CloseCDATA=2048;class i{constructor(t,e=0){this.cache={},this.data=t,this.ptr=e}}e.Reader=i;class o{constructor(t,e){this.line=t,this.character=e}}e.Position=o;class a extends i{get nameStart(){return this.cache.nameStart||(this.cache.nameStart=p(this.data,this.ptr))}get nameEnd(){return this.cache.nameEnd||(this.cache.nameEnd=p(this.data,this.ptr+8))}get valueStart(){return this.cache.valueStart||(this.cache.valueStart=p(this.data,this.ptr+16))}get valueEnd(){return this.cache.valueEnd||(this.cache.valueEnd=p(this.data,this.ptr+24))}get name(){if(this.cache.name)return this.cache.name;const t=l(this.data,this.ptr+32);return this.cache.name=c(this.data.buffer,this.ptr+36,t)}get value(){if(this.cache.value)return this.cache.value;const t=l(this.data,this.ptr+32),e=l(this.data,this.ptr+36+t);return this.cache.value=c(this.data.buffer,this.ptr+40+t,e)}toJSON(){const{nameStart:t,nameEnd:e,valueStart:r,valueEnd:n,name:i,value:o}=this;return{nameStart:t,nameEnd:e,valueStart:r,valueEnd:n,name:i,value:o}}}e.Attribute=a;class s extends i{get start(){return this.cache.start||(this.cache.start=p(this.data,this.ptr))}get end(){return this.cache.end||(this.cache.end=p(this.data,this.ptr+8))}get value(){if(this.cache.value)return this.cache.value;const t=l(this.data,this.ptr+16);return this.cache.value=c(this.data.buffer,this.ptr+20,t)}toJSON(){const{start:t,end:e,value:r}=this;return{start:t,end:e,value:r}}}e.Text=s;class u extends i{get value(){return this.cache.value?this.cache.value:this.cache.value=c(this.data.buffer,this.ptr,this.data.length)}toJSON(){return{value:this.value}}toString(){return this.value}}e.StringReader=u;class h extends i{get openStart(){return this.cache.openStart||(this.cache.openStart=p(this.data,0))}get openEnd(){return this.cache.openEnd||(this.cache.openEnd=p(this.data,8))}get closeStart(){return this.cache.closeStart||(this.cache.closeStart=p(this.data,16))}get closeEnd(){return this.cache.closeEnd||(this.cache.closeEnd=p(this.data,24))}get selfClosing(){return!!this.data[32]}get name(){if(this.cache.name)return this.cache.name;const t=l(this.data,33);return this.cache.name=c(this.data.buffer,37,t)}get attributes(){if(this.cache.attributes)return this.cache.attributes;let t=l(this.data,this.data.length-8),e=l(this.data,t);t+=4;const r=[];for(let n=0;n<e;n++){let e=l(this.data,t);t+=4,r[n]=new a(this.data,t),t+=e}return this.cache.attributes=r}get textNodes(){if(this.cache.textNodes)return this.cache.textNodes;let t=l(this.data,this.data.length-4),e=l(this.data,t);const r=[];t+=4;for(let n=0;n<e;n++){let e=l(this.data,t);t+=4,r[n]=new s(this.data,t),t+=e}return this.cache.textNodes=r}toJSON(){const{openStart:t,openEnd:e,closeStart:r,closeEnd:n,name:i,attributes:o,textNodes:a,selfClosing:s}=this;return{openStart:t,openEnd:e,closeStart:r,closeEnd:n,name:i,attributes:o,textNodes:a,selfClosing:s}}get value(){return this.name}}e.Tag=h;class f{constructor(t=0,e={highWaterMark:32768}){this.eventTrap=(t,e,r)=>{const i=new Uint8Array(this.wasmSaxParser.memory.buffer.slice(e,e+r));let o;switch(t){case n.Attribute:o=new a(i);break;case n.OpenTag:case n.CloseTag:case n.OpenTagStart:o=new h(i);break;case n.Text:o=new s(i);break;case n.OpenCDATA:o=p(i);break;default:o=new u(i)}this.eventHandler(t,o)},this.options=e;const r=this;Object.defineProperties(this,{events:{get:function(){return~~t},set:function(e){t=~~e,r.wasmSaxParser&&r.wasmSaxParser.parser(t)},configurable:!1,enumerable:!0}})}write(t,e=0){const{write:r,memory:{buffer:n}}=this.wasmSaxParser;this.writeBuffer&&this.writeBuffer.buffer===n||(this.writeBuffer=new Uint8Array(n,0,this.options.highWaterMark)),this.writeBuffer.set(t),r(e,t.byteLength)}end(){this.writeBuffer=null,this.wasmSaxParser.end()}async prepareWasm(t){const e=await WebAssembly.instantiate(t,{env:{memoryBase:0,tableBase:0,memory:new WebAssembly.Memory({initial:32}),table:new WebAssembly.Table({initial:1,element:"anyfunc"}),event_listener:this.eventTrap}});if(e){const{parser:t}=this.wasmSaxParser=e.instance.exports;return t(this.events),!0}throw new Error("Failed to instantiate the parser.")}}function c(e,n,i){return void 0!==(t||window).Buffer?r.from(e,n,i).toString():(f.textDecoder||(f.textDecoder=new TextDecoder)).decode(new Uint8Array(e,n,i))}function l(t,e){return t[e+3]<<24|t[e+2]<<16|t[e+1]<<8|t[e]}function p(t,e=0){const r=l(t,e),n=l(t,e+4);return new o(r,n)}e.SAXParser=f}).call(this,r(0),r(4).Buffer)},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(5),i=r(6),o=r(7);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return c(this,t)}return h(this,t,e,r)}function h(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=l(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|g(e,r),i=(t=s(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function(t,e){if(u.isBuffer(e)){var r=0|p(e.length);return 0===(t=s(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?s(t,0):l(t,e);if("Buffer"===e.type&&o(e.data))return l(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function c(t,e){if(f(e),t=s(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function l(t,e){var r=e.length<0?0:0|p(e.length);t=s(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function g(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return F(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return z(t).length;default:if(n)return F(t).length;e=(""+e).toLowerCase(),n=!0}}function d(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return U(this,e,r);case"utf8":case"utf-8":return P(this,e,r);case"ascii":return x(this,e,r);case"latin1":case"binary":return B(this,e,r);case"base64":return _(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function y(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function w(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:v(t,e,r,n,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):v(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function v(t,e,r,n,i){var o,a=1,s=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,r/=2}function h(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(i){var f=-1;for(o=r;o<s;o++)if(h(t,o)===h(e,-1===f?0:o-f)){if(-1===f&&(f=o),o-f+1===u)return f*a}else-1!==f&&(o-=o-f),f=-1}else for(r+u>s&&(r=s-u),o=r;o>=0;o--){for(var c=!0,l=0;l<u;l++)if(h(t,o+l)!==h(e,l)){c=!1;break}if(c)return o}return-1}function b(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var a=0;a<n;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[r+a]=s}return a}function m(t,e,r,n){return J(F(e,t.length-r),t,r,n)}function E(t,e,r,n){return J(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function A(t,e,r,n){return E(t,e,r,n)}function S(t,e,r,n){return J(z(e),t,r,n)}function T(t,e,r,n){return J(function(t,e){for(var r,n,i,o=[],a=0;a<t.length&&!((e-=2)<0);++a)r=t.charCodeAt(a),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function _(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function P(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,a,s,u,h=t[i],f=null,c=h>239?4:h>223?3:h>191?2:1;if(i+c<=r)switch(c){case 1:h<128&&(f=h);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&h)<<6|63&o)>127&&(f=u);break;case 3:o=t[i+1],a=t[i+2],128==(192&o)&&128==(192&a)&&(u=(15&h)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(f=u);break;case 4:o=t[i+1],a=t[i+2],s=t[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&h)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(f=u)}null===f?(f=65533,c=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),i+=c}return function(t){var e=t.length;if(e<=R)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=R));return r}(n)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return h(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function(t,e,r,n){return f(e),e<=0?s(t,e):void 0!==r?"string"==typeof n?s(t,e).fill(r,n):s(t,e).fill(r):s(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return c(null,t)},u.allocUnsafeSlow=function(t){return c(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var a=t[r];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,i),i+=a.length}return n},u.byteLength=g,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?P(this,0,t):d.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,r,n,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(e>>>=0),s=Math.min(o,a),h=this.slice(n,i),f=t.slice(e,r),c=0;c<s;++c)if(h[c]!==f[c]){o=h[c],a=f[c];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return w(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return w(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return b(this,t,e,r);case"utf8":case"utf-8":return m(this,t,e,r);case"ascii":return E(this,t,e,r);case"latin1":case"binary":return A(this,t,e,r);case"base64":return S(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var R=4096;function x(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function B(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function U(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=e;o<r;++o)i+=j(t[o]);return i}function O(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function C(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function I(t,e,r,n,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function M(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-r,2);i<o;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function Y(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-r,4);i<o;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function L(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function k(t,e,r,n,o){return o||L(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function D(t,e,r,n,o){return o||L(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;r=new u(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+t]}return r},u.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||C(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},u.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||C(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUInt8=function(t,e){return e||C(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||C(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||C(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||C(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||C(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||C(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||C(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||C(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||C(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){e||C(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return e||C(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||C(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||C(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||C(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||C(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||C(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||I(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},u.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||I(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},u.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):Y(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):Y(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);I(this,t,e,r,i-1,-i)}var o=0,a=1,s=0;for(this[e]=255&t;++o<r&&(a*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);I(this,t,e,r,i-1,-i)}var o=r-1,a=1,s=0;for(this[e+o]=255&t;--o>=0&&(a*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):Y(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):Y(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,r){return k(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return k(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return D(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return D(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,o=n-r;if(this===t&&r<e&&e<n)for(i=o-1;i>=0;--i)t[i+e]=this[i+r];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+o),e);return o},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var o;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(o=e;o<r;++o)this[o]=t;else{var a=u.isBuffer(t)?t:F(new u(t,n).toString()),s=a.length;for(o=0;o<r-e;++o)this[o+e]=a[o%s]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function j(t){return t<16?"0"+t.toString(16):t.toString(16)}function F(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],a=0;a<n;++a){if((r=t.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function z(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function J(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(0))},function(t,e,r){"use strict";e.byteLength=function(t){var e=h(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=h(t),a=n[0],s=n[1],u=new o(function(t,e,r){return 3*(e+r)/4-r}(0,a,s)),f=0,c=s>0?a-4:a;for(r=0;r<c;r+=4)e=i[t.charCodeAt(r)]<<18|i[t.charCodeAt(r+1)]<<12|i[t.charCodeAt(r+2)]<<6|i[t.charCodeAt(r+3)],u[f++]=e>>16&255,u[f++]=e>>8&255,u[f++]=255&e;2===s&&(e=i[t.charCodeAt(r)]<<2|i[t.charCodeAt(r+1)]>>4,u[f++]=255&e);1===s&&(e=i[t.charCodeAt(r)]<<10|i[t.charCodeAt(r+1)]<<4|i[t.charCodeAt(r+2)]>>2,u[f++]=e>>8&255,u[f++]=255&e);return u},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,o=[],a=0,s=r-i;a<s;a+=16383)o.push(f(t,a,a+16383>s?s:a+16383));1===i?(e=t[r-1],o.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],o.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)n[s]=a[s],i[a.charCodeAt(s)]=s;function h(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function f(t,e,r){for(var i,o,a=[],s=e;s<r;s+=3)i=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),a.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,i){var o,a,s=8*i-n-1,u=(1<<s)-1,h=u>>1,f=-7,c=r?i-1:0,l=r?-1:1,p=t[e+c];for(c+=l,o=p&(1<<-f)-1,p>>=-f,f+=s;f>0;o=256*o+t[e+c],c+=l,f-=8);for(a=o&(1<<-f)-1,o>>=-f,f+=n;f>0;a=256*a+t[e+c],c+=l,f-=8);if(0===o)o=1-h;else{if(o===u)return a?NaN:1/0*(p?-1:1);a+=Math.pow(2,n),o-=h}return(p?-1:1)*a*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var a,s,u,h=8*o-i-1,f=(1<<h)-1,c=f>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:o-1,g=n?1:-1,d=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=f):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+c>=1?l/u:l*Math.pow(2,1-c))*u>=2&&(a++,u/=2),a+c>=f?(s=0,a=f):a+c>=1?(s=(e*u-1)*Math.pow(2,i),a+=c):(s=e*Math.pow(2,c-1)*Math.pow(2,i),a=0));i>=8;t[r+p]=255&s,p+=g,s/=256,i-=8);for(a=a<<i|s,h+=i;h>0;t[r+p]=255&a,p+=g,a/=256,h-=8);t[r+p-g]|=128*d}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovLy8vaG9tZS9tYXR0aGV3L0RldmVsb3BtZW50L3NpdGVzL2RvY3RvcmVkMi9ub2RlX21vZHVsZXMvc2F4LXdhc20vbGliL2luZGV4LmpzIiwid2VicGFjazovLy8vaG9tZS9tYXR0aGV3L0RldmVsb3BtZW50L3NpdGVzL2RvY3RvcmVkMi9ub2RlX21vZHVsZXMvc2F4LXdhc20vbGliL3NheFdhc20uanMiLCJ3ZWJwYWNrOi8vLy9ob21lL21hdHRoZXcvRGV2ZWxvcG1lbnQvc2l0ZXMvZG9jdG9yZWQyL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9ob21lL21hdHRoZXcvRGV2ZWxvcG1lbnQvc2l0ZXMvZG9jdG9yZWQyL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9ob21lL21hdHRoZXcvRGV2ZWxvcG1lbnQvc2l0ZXMvZG9jdG9yZWQyL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8vaG9tZS9tYXR0aGV3L0RldmVsb3BtZW50L3NpdGVzL2RvY3RvcmVkMi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImciLCJ0aGlzIiwiRnVuY3Rpb24iLCJlIiwid2luZG93IiwibGFzdEVsZW1lbnQiLCJzYXhQYXJzZXIiLCJub2RlcyIsInBhcmVudEVsZW1lbnRzIiwicGFyZW50c0VsZW1lbnRzIiwiZmluZFBhcmVudHMiLCJpbmRleCIsInBhcmVudHNCeUlkIiwidW5kZWZpbmVkIiwibWFwIiwibm9kZSIsIk5vZGVUeXBlRW51bSIsIkVsZW1lbnQiLCJFcnJvciIsInNlbGYiLCJvbm1lc3NhZ2UiLCJtZXNzYWdlIiwiZGF0YSIsInR5cGUiLCJ3YXNtVXJsIiwiVVJMIiwibG9jYXRpb24iLCJ0b1N0cmluZyIsIlNBWFBhcnNlciIsIlNheEV2ZW50VHlwZSIsIk9wZW5UYWdTdGFydCIsIkF0dHJpYnV0ZSIsIlRleHQiLCJDbG9zZVRhZyIsImZldGNoIiwiYXJyYXlCdWZmZXIiLCJzYXhXYXNtQnVmZmVyIiwicHJlcGFyZVdhc20iLCJVaW50OEFycmF5IiwiZXZlbnRIYW5kbGVyIiwiZXZlbnQiLCJwdXNoIiwic2VsZkNsb3NpbmciLCJDbG9zZUVsZW1lbnQiLCJsZW5ndGgiLCJjb25zb2xlIiwiZXJyb3IiLCJFTEVNRU5UX0FUVFJJQlVURV9PRkZTRVQiLCJwb3AiLCJsb2ciLCJPcGVuVGFnIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5Iiwic2xpY2UiLCJwb3N0TWVzc2FnZSIsInJlYXNvbiIsImluaXRTYXgiLCJ1cmwiLCJyZXNwb25zZSIsImNvbnRlbnRMZW5ndGhCeXRlcyIsInBhcnNlSW50IiwiaGVhZGVycyIsIm5vZGVzTGVuZ3RoIiwiYm9keSIsImJ5dGVzUmVhZCIsInJlYWRlciIsImdldFJlYWRlciIsInJlYWQiLCJjaHVuayIsImRvbmUiLCJlbmQiLCJvZmZzZXQiLCJiaXQiLCJ3cml0ZSIsImxvYWRlZExlbmd0aEJ5dGVzIiwic3RhY2siLCJsb2FkIiwicGFyZW50cyIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsImdldFJhbmdlIiwiTm9kZVR5cGVJZCIsIl9fZXhwb3J0IiwiUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiU0dNTERlY2xhcmF0aW9uIiwiRG9jdHlwZSIsIkNvbW1lbnQiLCJPcGVuQ0RBVEEiLCJDZGF0YSIsIkNsb3NlQ0RBVEEiLCJSZWFkZXIiLCJwdHIiLCJjYWNoZSIsIlBvc2l0aW9uIiwibGluZSIsImNoYXJhY3RlciIsIm5hbWVTdGFydCIsInJlYWRQb3NpdGlvbiIsIm5hbWVFbmQiLCJ2YWx1ZVN0YXJ0IiwidmFsdWVFbmQiLCJuYW1lTGVuIiwicmVhZFUzMiIsInJlYWRTdHJpbmciLCJidWZmZXIiLCJ2YWx1ZUxlbiIsInN0YXJ0IiwiU3RyaW5nUmVhZGVyIiwiVGFnIiwib3BlblN0YXJ0Iiwib3BlbkVuZCIsImNsb3NlU3RhcnQiLCJjbG9zZUVuZCIsImF0dHJpYnV0ZXMiLCJudW1BdHRycyIsImF0dHJMZW4iLCJ0ZXh0Tm9kZXMiLCJudW1UZXh0Tm9kZXMiLCJ0ZXh0TGVuIiwiZXZlbnRzIiwib3B0aW9ucyIsImhpZ2hXYXRlck1hcmsiLCJldmVudFRyYXAiLCJsZW4iLCJ1aW50OGFycmF5Iiwid2FzbVNheFBhcnNlciIsIm1lbW9yeSIsImRldGFpbCIsImRlZmluZVByb3BlcnRpZXMiLCJzZXQiLCJwYXJzZXIiLCJjb25maWd1cmFibGUiLCJ3cml0ZUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJzYXhXYXNtIiwicmVzdWx0IiwiV2ViQXNzZW1ibHkiLCJpbnN0YW50aWF0ZSIsImVudiIsIm1lbW9yeUJhc2UiLCJ0YWJsZUJhc2UiLCJNZW1vcnkiLCJpbml0aWFsIiwidGFibGUiLCJUYWJsZSIsImVsZW1lbnQiLCJldmVudF9saXN0ZW5lciIsImluc3RhbmNlIiwiYnl0ZU9mZnNldCIsImdsb2JhbCIsIkJ1ZmZlciIsImZyb20iLCJ0ZXh0RGVjb2RlciIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwidWludDhBcnJheSIsImJhc2U2NCIsImllZWU3NTQiLCJpc0FycmF5Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsIl9fcHJvdG9fXyIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsIlR5cGVFcnJvciIsIkFycmF5QnVmZmVyIiwiYXJyYXkiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwiZnJvbVN0cmluZyIsIm9iaiIsImlzQnVmZmVyIiwiY2hlY2tlZCIsImNvcHkiLCJ2YWwiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsInNpemUiLCJpc1ZpZXciLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInRvTG93ZXJDYXNlIiwic2xvd1RvU3RyaW5nIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJkaXIiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFyciIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsIlN0cmluZyIsImJ1ZiIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImoiLCJoZXhXcml0ZSIsIk51bWJlciIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwiY2hhckNvZGVBdCIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJNYXRoIiwibWluIiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsImEiLCJ4IiwieSIsImNvbmNhdCIsImxpc3QiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJhcmd1bWVudHMiLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwibWF0Y2giLCJqb2luIiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJBcnJheSIsIl9hcnIiLCJyZXQiLCJvdXQiLCJ0b0hleCIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4IiwiZmxvb3IiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJjb2RlIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJ0b0J5dGVBcnJheSIsInRyaW0iLCJyZXBsYWNlIiwic3RyaW5ndHJpbSIsImJhc2U2NGNsZWFuIiwic3JjIiwiZHN0IiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRtcCIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwibnVtIiwib3V0cHV0IiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsImFicyIsIkxOMiJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0os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RUFDSitCLEVBQUkwWCxHQUNLMVgsRUFBSTJYLEdBQVMsR0FDdEIxWixHQUFNYSxFQUFRWixFQUFLLEdBQUt5USxLQUFLNkUsSUFBSSxFQUFHK0QsR0FDcEN2WCxHQUFRMlgsSUFFUjFaLEVBQUlhLEVBQVE2UCxLQUFLNkUsSUFBSSxFQUFHbUUsRUFBUSxHQUFLaEosS0FBSzZFLElBQUksRUFBRytELEdBQ2pEdlgsRUFBSSxJQUlEdVgsR0FBUSxFQUFHalIsRUFBT2pDLEVBQVN4RyxHQUFTLElBQUpJLEVBQVVKLEdBQUtNLEVBQUdGLEdBQUssSUFBS3NaLEdBQVEsR0FJM0UsSUFGQXZYLEVBQUtBLEdBQUt1WCxFQUFRdFosRUFDbEJ3WixHQUFRRixFQUNERSxFQUFPLEVBQUduUixFQUFPakMsRUFBU3hHLEdBQVMsSUFBSm1DLEVBQVVuQyxHQUFLTSxFQUFHNkIsR0FBSyxJQUFLeVgsR0FBUSxHQUUxRW5SLEVBQU9qQyxFQUFTeEcsRUFBSU0sSUFBVSxJQUFKeUIsSSxjQ2xGNUIsSUFBSTRCLEVBQVcsR0FBR0EsU0FFbEI1RCxFQUFPRCxRQUFVbVUsTUFBTWxJLFNBQVcsU0FBVWdELEdBQzFDLE1BQTZCLGtCQUF0QnBMLEVBQVN4RCxLQUFLNE8iLCJmaWxlIjoiZG9jdG9yZWQud29ya2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1ldmFsICovXG4vLyBhYm92ZSBydWxlIGlzIGRpc2FibGluZyAnc2VsZicgdmFyIGNoZWNrLlxuaW1wb3J0IHsgU2F4RXZlbnRUeXBlLCBTQVhQYXJzZXIsIERldGFpbCB9IGZyb20gXCJzYXgtd2FzbVwiO1xuXG5jb25zdCBub2RlczogTm9kZVR5cGVzW10gPSBbXTtcbmxldCBsYXN0RWxlbWVudDogTm9kZUVsZW1lbnRUeXBlIHwgdW5kZWZpbmVkO1xubGV0IHBhcmVudEVsZW1lbnRzOiBudW1iZXJbXSA9IFtdO1xubGV0IHBhcmVudHNFbGVtZW50czogbnVtYmVyW11bXSA9IFtdOyAvLyBpbmRleCBwb2ludGVycyB0byBwYXJlbnQgZWxlbWVudHNcbmxldCBzYXhQYXJzZXI6IFNBWFBhcnNlcjtcblxuYXN5bmMgZnVuY3Rpb24gaW5pdFNheChzZWxmOiBhbnksIG1lc3NhZ2U6IE1lc3NhZ2VJbkluaXREb2MpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3Qgd2FzbVVybCA9IG5ldyBVUkwoXCIuL3NheC13YXNtLndhc21cIiwgbWVzc2FnZS5sb2NhdGlvbikudG9TdHJpbmcoKTtcbiAgc2F4UGFyc2VyID0gbmV3IFNBWFBhcnNlcihcbiAgICBTYXhFdmVudFR5cGUuT3BlblRhZ1N0YXJ0IHxcbiAgICAgIFNheEV2ZW50VHlwZS5BdHRyaWJ1dGUgfFxuICAgICAgU2F4RXZlbnRUeXBlLlRleHQgfFxuICAgICAgU2F4RXZlbnRUeXBlLkNsb3NlVGFnXG4gICk7XG4gIGNvbnN0IHNheFdhc21SZXNwb25zZSA9IGF3YWl0IGZldGNoKHdhc21VcmwpO1xuICBjb25zdCBzYXhXYXNtQnVmZmVyID0gYXdhaXQgc2F4V2FzbVJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gIGNvbnN0IHJlYWR5ID0gYXdhaXQgc2F4UGFyc2VyLnByZXBhcmVXYXNtKG5ldyBVaW50OEFycmF5KHNheFdhc21CdWZmZXIpKTtcbiAgaWYgKHJlYWR5KSB7XG4gICAgc2F4UGFyc2VyLmV2ZW50SGFuZGxlciA9IChldmVudDogU2F4RXZlbnRUeXBlLCBkYXRhOiBEZXRhaWwpID0+IHtcbiAgICAgIHN3aXRjaCAoZXZlbnQpIHtcbiAgICAgICAgY2FzZSBTYXhFdmVudFR5cGUuT3BlblRhZ1N0YXJ0OiB7XG4gICAgICAgICAgbGFzdEVsZW1lbnQgPSBbXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgZGF0YS5uYW1lXG4gICAgICAgICAgXTtcbiAgICAgICAgICBub2Rlcy5wdXNoKGxhc3RFbGVtZW50KTtcblxuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBpZiAoZGF0YS5zZWxmQ2xvc2luZykge1xuICAgICAgICAgICAgbm9kZXMucHVzaChbTm9kZVR5cGVFbnVtLkNsb3NlRWxlbWVudF0gYXMgTm9kZUNsb3NlRWxlbWVudFR5cGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50cy5wdXNoKG5vZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFNheEV2ZW50VHlwZS5BdHRyaWJ1dGU6IHtcbiAgICAgICAgICBpZiAoIWxhc3RFbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICBcIkF0dHJpYnV0ZSBub2RlIHJlY2VpdmVkIHdpdGhvdXQgbGFzdEl0ZW0uIEh1aD9cIixcbiAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobGFzdEVsZW1lbnRbRUxFTUVOVF9BVFRSSUJVVEVfT0ZGU0VUXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsYXN0RWxlbWVudFtFTEVNRU5UX0FUVFJJQlVURV9PRkZTRVRdID0ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBsYXN0RWxlbWVudFtFTEVNRU5UX0FUVFJJQlVURV9PRkZTRVRdW2RhdGEubmFtZV0gPSBkYXRhLnZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgU2F4RXZlbnRUeXBlLkNsb3NlVGFnOiB7XG4gICAgICAgICAgbm9kZXMucHVzaChbTm9kZVR5cGVFbnVtLkNsb3NlRWxlbWVudF0gYXMgTm9kZUNsb3NlRWxlbWVudFR5cGUpO1xuICAgICAgICAgIHBhcmVudEVsZW1lbnRzLnBvcCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgU2F4RXZlbnRUeXBlLlRleHQ6IHtcbiAgICAgICAgICBub2Rlcy5wdXNoKFtcbiAgICAgICAgICAgIE5vZGVUeXBlRW51bS5UZXh0LFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgZGF0YS52YWx1ZVxuICAgICAgICAgIF0gYXMgTm9kZVRleHRUeXBlKTtcbiAgICAgICAgICBsYXN0RWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBcIlNBWCBFVkVOVFwiLFxuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICBTYXhFdmVudFR5cGUuT3BlblRhZyxcbiAgICAgICAgICAgIFNheEV2ZW50VHlwZS5PcGVuVGFnU3RhcnQsXG4gICAgICAgICAgICBTYXhFdmVudFR5cGUuQXR0cmlidXRlLFxuICAgICAgICAgICAgU2F4RXZlbnRUeXBlLkNsb3NlVGFnLFxuICAgICAgICAgICAgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChub2Rlc1tub2Rlcy5sZW5ndGggLSAxXVswXSA9PT0gTm9kZVR5cGVFbnVtLkVsZW1lbnQpIHtcbiAgICAgICAgcGFyZW50c0VsZW1lbnRzLnB1c2gocGFyZW50RWxlbWVudHMuc2xpY2UoKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBzZWxmLnBvc3RNZXNzYWdlKHsgdHlwZTogXCJkb2MtcmVhZHlcIiB9IGFzIE1lc3NhZ2VPdXREb2NSZWFkeSk7XG4gIH0gZWxzZSB7XG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICB0eXBlOiBcImRvYy1mYWlsdXJlXCIsXG4gICAgICByZWFzb246IFwiVW5hYmxlIHRvIHBhcnNlci5wcmVwYXJlV2FzbVwiXG4gICAgfSBhcyBNZXNzYWdlT3V0RG9jRmFpbHVyZSk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZChzZWxmOiBhbnksIG1lc3NhZ2U6IE1lc3NhZ2VJbkxvYWQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc29sZS5sb2coXCJMb2FkaW5nLi4uXCIsIG1lc3NhZ2UudXJsKTtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKG1lc3NhZ2UudXJsKTtcbiAgICBjb25zdCBjb250ZW50TGVuZ3RoQnl0ZXMgPSBwYXJzZUludChcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1MZW5ndGhcIikgfHwgXCItMVwiLFxuICAgICAgMTBcbiAgICApO1xuXG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICB0eXBlOiBcImxvYWRpbmdcIixcbiAgICAgIHVybDogbWVzc2FnZS51cmwsXG4gICAgICBjb250ZW50TGVuZ3RoQnl0ZXMsXG4gICAgICBub2Rlc0xlbmd0aDogbm9kZXMubGVuZ3RoXG4gICAgfSBhcyBNZXNzYWdlT3V0TG9hZGluZyk7XG5cbiAgICBpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5ib2R5KVxuICAgICAgdGhyb3cgRXJyb3IoXCJGZXRjaCBlcnJvci4gUmVzcG9uc2UgdHlwZSA9IFwiICsgdHlwZW9mIHJlc3BvbnNlKTtcblxuICAgIGxldCBieXRlc1JlYWQgPSAwO1xuICAgIGNvbnN0IHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNvbnN0IGNodW5rID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgIGlmIChjaHVuay5kb25lKSB7XG4gICAgICAgIHNheFBhcnNlci5lbmQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgIHdoaWxlIChvZmZzZXQgPCBjaHVuay52YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYml0ID0gY2h1bmsudmFsdWUuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyAxMDI0KTtcbiAgICAgICAgc2F4UGFyc2VyLndyaXRlKGJpdCk7XG4gICAgICAgIG9mZnNldCArPSAxMDI0O1xuICAgICAgfVxuICAgICAgYnl0ZXNSZWFkICs9IGNodW5rLnZhbHVlID8gY2h1bmsudmFsdWUubGVuZ3RoIDogMDtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiQnl0ZXNcIiwgYnl0ZXNSZWFkKTtcblxuICAgICAgLy8gY29uc29sZS5sb2coXG4gICAgICAvLyAgIFwiTG9hZGluZyBjaHVuayBzaXplXCIsXG4gICAgICAvLyAgIGNodW5rLnZhbHVlID8gY2h1bmsudmFsdWUubGVuZ3RoIDogXCJub3RoaW5nIChkb25lKVwiXG4gICAgICAvLyApO1xuICAgICAgLy8gZGF0YSArPSBjaHVuay52YWx1ZSA/IHV0ZjhEZWNvZGVyLmRlY29kZShjaHVuay52YWx1ZSkgOiBcIlwiO1xuICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6IFwibG9hZGluZ1wiLFxuICAgICAgICB1cmw6IG1lc3NhZ2UudXJsLFxuICAgICAgICBjb250ZW50TGVuZ3RoQnl0ZXMsXG4gICAgICAgIGxvYWRlZExlbmd0aEJ5dGVzOiBieXRlc1JlYWQsXG4gICAgICAgIG5vZGVzTGVuZ3RoOiBub2Rlcy5sZW5ndGhcbiAgICAgIH0gYXMgTWVzc2FnZU91dExvYWRpbmcpO1xuICAgIH1cbiAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgIHR5cGU6IFwibG9hZGVkXCIsXG4gICAgICB1cmw6IG1lc3NhZ2UudXJsLFxuICAgICAgY29udGVudExlbmd0aEJ5dGVzLFxuICAgICAgbG9hZGVkTGVuZ3RoQnl0ZXM6IGJ5dGVzUmVhZCxcbiAgICAgIG5vZGVzTGVuZ3RoOiBub2Rlcy5sZW5ndGhcbiAgICB9IGFzIE1lc3NhZ2VPdXRMb2FkZWQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coXCJmZXRjaCBsb2FkIGVycm9yXCIsIGUsIGUuc3RhY2spO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRQYXJlbnRzKGluZGV4OiBudW1iZXIpOiBOb2RlRWxlbWVudFR5cGVbXSB7XG4gIGZvciAobGV0IGkgPSBpbmRleDsgaS0tOyBpID49IDApIHtcbiAgICBjb25zdCBwYXJlbnRzQnlJZCA9IHBhcmVudHNFbGVtZW50c1tpXTtcbiAgICBpZiAocGFyZW50c0J5SWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHBhcmVudHNCeUlkLm1hcChcbiAgICAgICAgKGluZGV4OiBudW1iZXIpOiBOb2RlRWxlbWVudFR5cGUgPT4ge1xuICAgICAgICAgIGNvbnN0IG5vZGU6IE5vZGVUeXBlcyA9IG5vZGVzW2luZGV4XTtcblxuICAgICAgICAgIGlmIChub2RlWzBdICE9PSBOb2RlVHlwZUVudW0uRWxlbWVudCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFBhcmVudCBub2RlIG5vdCBlbGVtZW50LiBGYXRhbCBlcnJvci4gQnllIWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBnZXRSYW5nZShzZWxmOiBhbnksIG1lc3NhZ2U6IE1lc3NhZ2VJbkdldFJhbmdlKSB7XG4gIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgIHR5cGU6IFwiZ2V0LXJhbmdlL3Jlc3BvbnNlXCIsXG4gICAgcGFyZW50czogZmluZFBhcmVudHMobWVzc2FnZS5zdGFydEluZGV4KSxcbiAgICBzdGFydEluZGV4OiBtZXNzYWdlLnN0YXJ0SW5kZXgsXG4gICAgZW5kSW5kZXg6IG1lc3NhZ2UuZW5kSW5kZXgsXG4gICAgbm9kZXM6IG5vZGVzLnNsaWNlKG1lc3NhZ2Uuc3RhcnRJbmRleCwgbWVzc2FnZS5lbmRJbmRleClcbiAgfSBhcyBNZXNzYWdlT3V0R2V0UmFuZ2VSZXNwb25zZSk7XG59XG5cbi8vIEB0cy1pZ25vcmVcbnNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xuICBjb25zdCBtZXNzYWdlOiBNZXNzYWdlSW4gPSBlLmRhdGE7XG4gIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XG4gICAgY2FzZSBcImluaXQtZG9jXCI6IHtcbiAgICAgIGluaXRTYXgoc2VsZiwgbWVzc2FnZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImxvYWQtc291cmNlXCI6IHtcbiAgICAgIGxvYWQoc2VsZiwgbWVzc2FnZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImdldC1yYW5nZS9yZXF1ZXN0XCI6IHtcbiAgICAgIGdldFJhbmdlKHNlbGYsIG1lc3NhZ2UpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJjYW5jZWxcIjoge1xuICAgICAgLy8gbm90IHN1cHBvcnRlZFxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHRocm93IEVycm9yKGBVbnJlY29nbmlzZWQgbWVzc2FnZSAke0pTT04uc3RyaW5naWZ5KG1lc3NhZ2UpfWApO1xuICAgIH1cbiAgfVxufTtcblxuLy8gTWVzc2FnZSBJbiAodG8gd2ViIHdvcmtlcilcblxuZXhwb3J0IHR5cGUgTWVzc2FnZUluSW5pdERvYyA9IHtcbiAgdHlwZTogXCJpbml0LWRvY1wiO1xuICBsb2NhdGlvbjogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgTWVzc2FnZUluTG9hZCA9IHtcbiAgdHlwZTogXCJsb2FkLXNvdXJjZVwiO1xuICB1cmw6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VJbkdldFJhbmdlID0ge1xuICB0eXBlOiBcImdldC1yYW5nZS9yZXF1ZXN0XCI7XG4gIHN0YXJ0SW5kZXg6IG51bWJlcjtcbiAgZW5kSW5kZXg6IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VJbkNhbmNlbCA9IHsgdHlwZTogXCJjYW5jZWxcIiB9O1xuXG5leHBvcnQgdHlwZSBNZXNzYWdlSW4gPVxuICB8IE1lc3NhZ2VJbkluaXREb2NcbiAgfCBNZXNzYWdlSW5Mb2FkXG4gIHwgTWVzc2FnZUluQ2FuY2VsXG4gIHwgTWVzc2FnZUluR2V0UmFuZ2U7XG5cbi8vIE1lc3NhZ2UgT3V0IChmcm9tIHdlYiB3b3JrZXIpXG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VPdXREb2NSZWFkeSA9IHtcbiAgdHlwZTogXCJkb2MtcmVhZHlcIjtcbn07XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VPdXREb2NGYWlsdXJlID0ge1xuICB0eXBlOiBcImRvYy1mYWlsdXJlXCI7XG4gIHJlYXNvbj86IHN0cmluZyB8IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VPdXRMb2FkaW5nID0ge1xuICB0eXBlOiBcImxvYWRpbmdcIjtcbiAgdXJsOiBzdHJpbmc7XG4gIGNvbnRlbnRMZW5ndGhCeXRlczogbnVtYmVyO1xuICBsb2FkZWRMZW5ndGhCeXRlczogbnVtYmVyO1xuICBsb2FkZWRMZW5ndGhTdHJpbmc/OiBudW1iZXI7XG4gIG5vZGVzTGVuZ3RoOiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBNZXNzYWdlT3V0TG9hZGVkID0ge1xuICB0eXBlOiBcImxvYWRlZFwiO1xuICB1cmw6IHN0cmluZztcbiAgY29udGVudExlbmd0aEJ5dGVzOiBudW1iZXI7XG4gIGxvYWRlZExlbmd0aEJ5dGVzOiBudW1iZXI7XG4gIGxvYWRlZExlbmd0aFN0cmluZz86IG51bWJlcjtcbiAgbm9kZXNMZW5ndGg6IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VPdXRHZXRSYW5nZVJlc3BvbnNlID0ge1xuICB0eXBlOiBcImdldC1yYW5nZS9yZXNwb25zZVwiO1xuICBwYXJlbnRzOiBOb2RlRWxlbWVudFR5cGVbXTtcbiAgc3RhcnRJbmRleDogbnVtYmVyO1xuICBlbmRJbmRleDogbnVtYmVyO1xuICBub2RlczogTm9kZVR5cGVzW107XG59O1xuXG5leHBvcnQgdHlwZSBNZXNzYWdlT3V0ID1cbiAgfCBNZXNzYWdlT3V0RG9jUmVhZHlcbiAgfCBNZXNzYWdlT3V0TG9hZGluZ1xuICB8IE1lc3NhZ2VPdXRMb2FkZWRcbiAgfCBNZXNzYWdlT3V0R2V0UmFuZ2VSZXNwb25zZTtcblxuLy8gTm9kZSBUeXBlc1xuXG50eXBlIE5vZGVBdHRyaWJ1dGVzVHlwZSA9IHtcbiAgW25hbWU6IHN0cmluZ106IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIE5vZGVFbGVtZW50VHlwZSA9IFtcbiAgTm9kZVR5cGVFbnVtLkVsZW1lbnQsIC8vIG5vdGVUeXBlXG4gIHN0cmluZywgLy8gbm9kZU5hbWVcbiAgKE5vZGVBdHRyaWJ1dGVzVHlwZSB8IG51bGwpPyxcbiAgc3RyaW5nPyAvLyBuYW1lc3BhY2Vcbl07XG5jb25zdCBFTEVNRU5UX0FUVFJJQlVURV9PRkZTRVQgPSAyO1xuXG5leHBvcnQgdHlwZSBOb2RlQ2xvc2VFbGVtZW50VHlwZSA9IFtOb2RlVHlwZUVudW0uQ2xvc2VFbGVtZW50XTsgLy8gbm9uLXN0YW5kYXJkIG5vZGVUeXBlIChvYnYpXG5leHBvcnQgdHlwZSBOb2RlVGV4dFR5cGUgPSBbTm9kZVR5cGVFbnVtLlRleHQsIHN0cmluZ107XG5cbmV4cG9ydCB0eXBlIE5vZGVUeXBlcyA9IE5vZGVFbGVtZW50VHlwZSB8IE5vZGVUZXh0VHlwZSB8IE5vZGVDbG9zZUVsZW1lbnRUeXBlO1xuXG5leHBvcnQgY29uc3QgTm9kZVR5cGVJZCA9IHtcbiAgRWxlbWVudDogMSxcbiAgVGV4dDogMyxcbiAgQ2xvc2VFbGVtZW50OiAyMFxufTtcblxuZW51bSBOb2RlVHlwZUVudW0ge1xuICBFbGVtZW50ID0gMSxcbiAgVGV4dCA9IDMsXG4gIENsb3NlRWxlbWVudCA9IDIwXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zYXhXYXNtXCIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgU2F4RXZlbnRUeXBlIHtcbn1cbmV4cG9ydHMuU2F4RXZlbnRUeXBlID0gU2F4RXZlbnRUeXBlO1xuLy8gMVxuU2F4RXZlbnRUeXBlLlRleHQgPSAwYjE7XG4vLyAyXG5TYXhFdmVudFR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gMGIxMDtcbi8vIDRcblNheEV2ZW50VHlwZS5TR01MRGVjbGFyYXRpb24gPSAwYjEwMDtcbi8vIDhcblNheEV2ZW50VHlwZS5Eb2N0eXBlID0gMGIxMDAwO1xuLy8gMTZcblNheEV2ZW50VHlwZS5Db21tZW50ID0gMGIxMDAwMDtcbi8vIDMyXG5TYXhFdmVudFR5cGUuT3BlblRhZ1N0YXJ0ID0gMGIxMDAwMDA7XG4vLyA2NFxuU2F4RXZlbnRUeXBlLkF0dHJpYnV0ZSA9IDBiMTAwMDAwMDtcbi8vIDEyOFxuU2F4RXZlbnRUeXBlLk9wZW5UYWcgPSAwYjEwMDAwMDAwO1xuLy8gMjU2XG5TYXhFdmVudFR5cGUuQ2xvc2VUYWcgPSAwYjEwMDAwMDAwMDtcbi8vIDUxMlxuU2F4RXZlbnRUeXBlLk9wZW5DREFUQSA9IDBiMTAwMDAwMDAwMDtcbi8vIDEwMjRcblNheEV2ZW50VHlwZS5DZGF0YSA9IDBiMTAwMDAwMDAwMDA7XG4vLyAyMDQ4XG5TYXhFdmVudFR5cGUuQ2xvc2VDREFUQSA9IDBiMTAwMDAwMDAwMDAwO1xuY2xhc3MgUmVhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBwdHIgPSAwKSB7XG4gICAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5wdHIgPSBwdHI7XG4gICAgfVxufVxuZXhwb3J0cy5SZWFkZXIgPSBSZWFkZXI7XG5jbGFzcyBQb3NpdGlvbiB7XG4gICAgY29uc3RydWN0b3IobGluZSwgY2hhcmFjdGVyKSB7XG4gICAgICAgIHRoaXMubGluZSA9IGxpbmU7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyID0gY2hhcmFjdGVyO1xuICAgIH1cbn1cbmV4cG9ydHMuUG9zaXRpb24gPSBQb3NpdGlvbjtcbmNsYXNzIEF0dHJpYnV0ZSBleHRlbmRzIFJlYWRlciB7XG4gICAgZ2V0IG5hbWVTdGFydCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUubmFtZVN0YXJ0IHx8ICh0aGlzLmNhY2hlLm5hbWVTdGFydCA9IHJlYWRQb3NpdGlvbih0aGlzLmRhdGEsIHRoaXMucHRyKSk7XG4gICAgfVxuICAgIGdldCBuYW1lRW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5uYW1lRW5kIHx8ICh0aGlzLmNhY2hlLm5hbWVFbmQgPSByZWFkUG9zaXRpb24odGhpcy5kYXRhLCB0aGlzLnB0ciArIDgpKTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlU3RhcnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlLnZhbHVlU3RhcnQgfHwgKHRoaXMuY2FjaGUudmFsdWVTdGFydCA9IHJlYWRQb3NpdGlvbih0aGlzLmRhdGEsIHRoaXMucHRyICsgMTYpKTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlRW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS52YWx1ZUVuZCB8fCAodGhpcy5jYWNoZS52YWx1ZUVuZCA9IHJlYWRQb3NpdGlvbih0aGlzLmRhdGEsIHRoaXMucHRyICsgMjQpKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlLm5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmFtZUxlbiA9IHJlYWRVMzIodGhpcy5kYXRhLCB0aGlzLnB0ciArIDMyKTtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNhY2hlLm5hbWUgPSByZWFkU3RyaW5nKHRoaXMuZGF0YS5idWZmZXIsIHRoaXMucHRyICsgMzYsIG5hbWVMZW4pKTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICBpZiAodGhpcy5jYWNoZS52YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmFtZUxlbiA9IHJlYWRVMzIodGhpcy5kYXRhLCB0aGlzLnB0ciArIDMyKTtcbiAgICAgICAgY29uc3QgdmFsdWVMZW4gPSByZWFkVTMyKHRoaXMuZGF0YSwgdGhpcy5wdHIgKyAzNiArIG5hbWVMZW4pO1xuICAgICAgICByZXR1cm4gKHRoaXMuY2FjaGUudmFsdWUgPSByZWFkU3RyaW5nKHRoaXMuZGF0YS5idWZmZXIsIHRoaXMucHRyICsgNDAgKyBuYW1lTGVuLCB2YWx1ZUxlbikpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IHsgbmFtZVN0YXJ0LCBuYW1lRW5kLCB2YWx1ZVN0YXJ0LCB2YWx1ZUVuZCwgbmFtZSwgdmFsdWUgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7IG5hbWVTdGFydCwgbmFtZUVuZCwgdmFsdWVTdGFydCwgdmFsdWVFbmQsIG5hbWUsIHZhbHVlIH07XG4gICAgfVxufVxuZXhwb3J0cy5BdHRyaWJ1dGUgPSBBdHRyaWJ1dGU7XG5jbGFzcyBUZXh0IGV4dGVuZHMgUmVhZGVyIHtcbiAgICBnZXQgc3RhcnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlLnN0YXJ0IHx8ICh0aGlzLmNhY2hlLnN0YXJ0ID0gcmVhZFBvc2l0aW9uKHRoaXMuZGF0YSwgdGhpcy5wdHIpKTtcbiAgICB9XG4gICAgZ2V0IGVuZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuZW5kIHx8ICh0aGlzLmNhY2hlLmVuZCA9IHJlYWRQb3NpdGlvbih0aGlzLmRhdGEsIHRoaXMucHRyICsgOCkpO1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlLnZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZUxlbiA9IHJlYWRVMzIodGhpcy5kYXRhLCB0aGlzLnB0ciArIDE2KTtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNhY2hlLnZhbHVlID0gcmVhZFN0cmluZyh0aGlzLmRhdGEuYnVmZmVyLCB0aGlzLnB0ciArIDIwLCB2YWx1ZUxlbikpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IHsgc3RhcnQsIGVuZCwgdmFsdWUgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7IHN0YXJ0LCBlbmQsIHZhbHVlIH07XG4gICAgfVxufVxuZXhwb3J0cy5UZXh0ID0gVGV4dDtcbmNsYXNzIFN0cmluZ1JlYWRlciBleHRlbmRzIFJlYWRlciB7XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICBpZiAodGhpcy5jYWNoZS52YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh0aGlzLmNhY2hlLnZhbHVlID0gcmVhZFN0cmluZyh0aGlzLmRhdGEuYnVmZmVyLCB0aGlzLnB0ciwgdGhpcy5kYXRhLmxlbmd0aCkpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiB0aGlzLnZhbHVlIH07XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG59XG5leHBvcnRzLlN0cmluZ1JlYWRlciA9IFN0cmluZ1JlYWRlcjtcbmNsYXNzIFRhZyBleHRlbmRzIFJlYWRlciB7XG4gICAgZ2V0IG9wZW5TdGFydCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUub3BlblN0YXJ0IHx8ICh0aGlzLmNhY2hlLm9wZW5TdGFydCA9IHJlYWRQb3NpdGlvbih0aGlzLmRhdGEsIDApKTtcbiAgICB9XG4gICAgZ2V0IG9wZW5FbmQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlLm9wZW5FbmQgfHwgKHRoaXMuY2FjaGUub3BlbkVuZCA9IHJlYWRQb3NpdGlvbih0aGlzLmRhdGEsIDgpKTtcbiAgICB9XG4gICAgZ2V0IGNsb3NlU3RhcnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlLmNsb3NlU3RhcnQgfHwgKHRoaXMuY2FjaGUuY2xvc2VTdGFydCA9IHJlYWRQb3NpdGlvbih0aGlzLmRhdGEsIDE2KSk7XG4gICAgfVxuICAgIGdldCBjbG9zZUVuZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuY2xvc2VFbmQgfHwgKHRoaXMuY2FjaGUuY2xvc2VFbmQgPSByZWFkUG9zaXRpb24odGhpcy5kYXRhLCAyNCkpO1xuICAgIH1cbiAgICBnZXQgc2VsZkNsb3NpbmcoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuZGF0YVszMl07XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICBpZiAodGhpcy5jYWNoZS5uYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5hbWVMZW4gPSByZWFkVTMyKHRoaXMuZGF0YSwgMzMpO1xuICAgICAgICByZXR1cm4gKHRoaXMuY2FjaGUubmFtZSA9IHJlYWRTdHJpbmcodGhpcy5kYXRhLmJ1ZmZlciwgMzcsIG5hbWVMZW4pKTtcbiAgICB9XG4gICAgZ2V0IGF0dHJpYnV0ZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlLmF0dHJpYnV0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3RhcnRpbmcgbG9jYXRpb24gb2YgdGhlIGF0dHJpYnV0ZSBibG9ja1xuICAgICAgICBsZXQgcHRyID0gcmVhZFUzMih0aGlzLmRhdGEsIHRoaXMuZGF0YS5sZW5ndGggLSA4KTtcbiAgICAgICAgbGV0IG51bUF0dHJzID0gcmVhZFUzMih0aGlzLmRhdGEsIHB0cik7XG4gICAgICAgIHB0ciArPSA0O1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQXR0cnM7IGkrKykge1xuICAgICAgICAgICAgbGV0IGF0dHJMZW4gPSByZWFkVTMyKHRoaXMuZGF0YSwgcHRyKTtcbiAgICAgICAgICAgIHB0ciArPSA0O1xuICAgICAgICAgICAgYXR0cmlidXRlc1tpXSA9IG5ldyBBdHRyaWJ1dGUodGhpcy5kYXRhLCBwdHIpO1xuICAgICAgICAgICAgcHRyICs9IGF0dHJMZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh0aGlzLmNhY2hlLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzKTtcbiAgICB9XG4gICAgZ2V0IHRleHROb2RlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGUudGV4dE5vZGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS50ZXh0Tm9kZXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3RhcnRpbmcgbG9jYXRpb24gb2YgdGhlIHRleHQgbm9kZXMgYmxvY2tcbiAgICAgICAgbGV0IHB0ciA9IHJlYWRVMzIodGhpcy5kYXRhLCB0aGlzLmRhdGEubGVuZ3RoIC0gNCk7XG4gICAgICAgIGxldCBudW1UZXh0Tm9kZXMgPSByZWFkVTMyKHRoaXMuZGF0YSwgcHRyKTtcbiAgICAgICAgY29uc3QgdGV4dE5vZGVzID0gW107XG4gICAgICAgIHB0ciArPSA0O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVRleHROb2RlczsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdGV4dExlbiA9IHJlYWRVMzIodGhpcy5kYXRhLCBwdHIpO1xuICAgICAgICAgICAgcHRyICs9IDQ7XG4gICAgICAgICAgICB0ZXh0Tm9kZXNbaV0gPSBuZXcgVGV4dCh0aGlzLmRhdGEsIHB0cik7XG4gICAgICAgICAgICBwdHIgKz0gdGV4dExlbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHRoaXMuY2FjaGUudGV4dE5vZGVzID0gdGV4dE5vZGVzKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCB7IG9wZW5TdGFydCwgb3BlbkVuZCwgY2xvc2VTdGFydCwgY2xvc2VFbmQsIG5hbWUsIGF0dHJpYnV0ZXMsIHRleHROb2Rlcywgc2VsZkNsb3NpbmcgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7IG9wZW5TdGFydCwgb3BlbkVuZCwgY2xvc2VTdGFydCwgY2xvc2VFbmQsIG5hbWUsIGF0dHJpYnV0ZXMsIHRleHROb2Rlcywgc2VsZkNsb3NpbmcgfTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cbn1cbmV4cG9ydHMuVGFnID0gVGFnO1xuY2xhc3MgU0FYUGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcihldmVudHMgPSAwLCBvcHRpb25zID0geyBoaWdoV2F0ZXJNYXJrOiAzMiAqIDEwMjQgfSkge1xuICAgICAgICB0aGlzLmV2ZW50VHJhcCA9IChldmVudCwgcHRyLCBsZW4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVpbnQ4YXJyYXkgPSBuZXcgVWludDhBcnJheSh0aGlzLndhc21TYXhQYXJzZXIubWVtb3J5LmJ1ZmZlci5zbGljZShwdHIsIHB0ciArIGxlbikpO1xuICAgICAgICAgICAgbGV0IGRldGFpbDtcbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFNheEV2ZW50VHlwZS5BdHRyaWJ1dGU6XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbCA9IG5ldyBBdHRyaWJ1dGUodWludDhhcnJheSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgU2F4RXZlbnRUeXBlLk9wZW5UYWc6XG4gICAgICAgICAgICAgICAgY2FzZSBTYXhFdmVudFR5cGUuQ2xvc2VUYWc6XG4gICAgICAgICAgICAgICAgY2FzZSBTYXhFdmVudFR5cGUuT3BlblRhZ1N0YXJ0OlxuICAgICAgICAgICAgICAgICAgICBkZXRhaWwgPSBuZXcgVGFnKHVpbnQ4YXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFNheEV2ZW50VHlwZS5UZXh0OlxuICAgICAgICAgICAgICAgICAgICBkZXRhaWwgPSBuZXcgVGV4dCh1aW50OGFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBTYXhFdmVudFR5cGUuT3BlbkNEQVRBOlxuICAgICAgICAgICAgICAgICAgICBkZXRhaWwgPSByZWFkUG9zaXRpb24odWludDhhcnJheSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbCA9IG5ldyBTdHJpbmdSZWFkZXIodWludDhhcnJheSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ldmVudEhhbmRsZXIoZXZlbnQsIGRldGFpbCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIH5+ZXZlbnRzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gfn52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYud2FzbVNheFBhcnNlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi53YXNtU2F4UGFyc2VyLnBhcnNlcihldmVudHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgY29uZmlndXJhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgd3JpdGUoY2h1bmssIG9mZnNldCA9IDApIHtcbiAgICAgICAgY29uc3QgeyB3cml0ZSwgbWVtb3J5OiB7IGJ1ZmZlciB9IH0gPSB0aGlzLndhc21TYXhQYXJzZXI7XG4gICAgICAgIC8vIEFsbG9jYXRpb25zIHdpdGhpbiB0aGUgV0FTTSBwcm9jZXNzXG4gICAgICAgIC8vIGludmFsaWRhdGUgcmVmZXJlbmNlIHRvIHRoZSBtZW1vcnkgYnVmZmVyLlxuICAgICAgICAvLyBXZSBjaGVjayBmb3IgdGhpcyBhbmQgY3JlYXRlIGEgbmV3IFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gd2l0aCB0aGUgbmV3IG1lbW9yeSBidWZmZXIgcmVmZXJlbmNlIGlmIG5lZWRlZC5cbiAgICAgICAgLy8gKipOT1RFKiogVGhlc2UgYWxsb2NhdGlvbnMgY2FuIHNsb3cgZG93biBwYXJzaW5nXG4gICAgICAgIC8vIGlmIHRoZXkgYmVjb21lIGV4Y2Vzc2l2ZS4gQ29uc2lkZXIgYWRqdXN0aW5nIHRoZVxuICAgICAgICAvLyBoaWdoV2F0ZXJNYXJrIGluIHRoZSBvcHRpb25zIHVwIG9yIGRvd24gdG8gZmluZCB0aGUgb3B0aW1hbFxuICAgICAgICAvLyBtZW1vcnkgYWxsb2NhdGlvbiB0byBwcmV2ZW50IHRvbyBtYW55IG5ldyBVaW50OEFycmF5IGluc3RhbmNlcy5cbiAgICAgICAgaWYgKCF0aGlzLndyaXRlQnVmZmVyIHx8IHRoaXMud3JpdGVCdWZmZXIuYnVmZmVyICE9PSBidWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMud3JpdGVCdWZmZXIgPSBuZXcgVWludDhBcnJheShidWZmZXIsIDAsIHRoaXMub3B0aW9ucy5oaWdoV2F0ZXJNYXJrKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndyaXRlQnVmZmVyLnNldChjaHVuayk7XG4gICAgICAgIHdyaXRlKG9mZnNldCwgY2h1bmsuYnl0ZUxlbmd0aCk7XG4gICAgfVxuICAgIGVuZCgpIHtcbiAgICAgICAgdGhpcy53cml0ZUJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHRoaXMud2FzbVNheFBhcnNlci5lbmQoKTtcbiAgICB9XG4gICAgYXN5bmMgcHJlcGFyZVdhc20oc2F4V2FzbSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShzYXhXYXNtLCB7XG4gICAgICAgICAgICBlbnY6IHtcbiAgICAgICAgICAgICAgICBtZW1vcnlCYXNlOiAwLFxuICAgICAgICAgICAgICAgIHRhYmxlQmFzZTogMCxcbiAgICAgICAgICAgICAgICBtZW1vcnk6IG5ldyBXZWJBc3NlbWJseS5NZW1vcnkoeyBpbml0aWFsOiAzMiB9KSxcbiAgICAgICAgICAgICAgICB0YWJsZTogbmV3IFdlYkFzc2VtYmx5LlRhYmxlKHsgaW5pdGlhbDogMSwgZWxlbWVudDogJ2FueWZ1bmMnIH0pLFxuICAgICAgICAgICAgICAgIGV2ZW50X2xpc3RlbmVyOiB0aGlzLmV2ZW50VHJhcFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgY29uc3QgeyBwYXJzZXIgfSA9IHRoaXMud2FzbVNheFBhcnNlciA9IHJlc3VsdC5pbnN0YW5jZS5leHBvcnRzO1xuICAgICAgICAgICAgcGFyc2VyKHRoaXMuZXZlbnRzKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGluc3RhbnRpYXRlIHRoZSBwYXJzZXIuYCk7XG4gICAgfVxufVxuZXhwb3J0cy5TQVhQYXJzZXIgPSBTQVhQYXJzZXI7XG5mdW5jdGlvbiByZWFkU3RyaW5nKGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIGNvbnN0IGVudiA9IChnbG9iYWwgfHwgd2luZG93KTtcbiAgICAvLyBOb2RlXG4gICAgaWYgKGVudi5CdWZmZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKS50b1N0cmluZygpO1xuICAgIH1cbiAgICAvLyBXZWJcbiAgICByZXR1cm4gKFNBWFBhcnNlci50ZXh0RGVjb2RlciB8fCAoU0FYUGFyc2VyLnRleHREZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCkpKVxuICAgICAgICAuZGVjb2RlKG5ldyBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkpO1xufVxuZnVuY3Rpb24gcmVhZFUzMih1aW50OEFycmF5LCBwdHIpIHtcbiAgICByZXR1cm4gKHVpbnQ4QXJyYXlbcHRyICsgM10gPDwgMjQpIHwgKHVpbnQ4QXJyYXlbcHRyICsgMl0gPDwgMTYpIHwgKHVpbnQ4QXJyYXlbcHRyICsgMV0gPDwgOCkgfCB1aW50OEFycmF5W3B0cl07XG59XG5mdW5jdGlvbiByZWFkUG9zaXRpb24odWludDhBcnJheSwgcHRyID0gMCkge1xuICAgIGNvbnN0IGxpbmUgPSByZWFkVTMyKHVpbnQ4QXJyYXksIHB0cik7XG4gICAgY29uc3QgY2hhcmFjdGVyID0gcmVhZFUzMih1aW50OEFycmF5LCBwdHIgKyA0KTtcbiAgICByZXR1cm4gbmV3IFBvc2l0aW9uKGxpbmUsIGNoYXJhY3Rlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYXhXYXNtLmpzLm1hcCIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9