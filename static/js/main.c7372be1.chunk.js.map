{"version":3,"sources":["App.utils.tsx","App.tsx","index.tsx"],"names":["NodeTypeEnum","ParentType","Nodes","nodeName","nodes","html","parents","console","log","i","length","node","Element","inline","includes","push","block","Text","CloseElement","pop","dangerouslySetInnerHTML","__html","App","props","sourceWorker","state","sourceWorkerInit","bind","this","onmessage","Worker","postMessage","type","location","window","toString","e","requestedRange","message","data","url","URL","newRange","Math","min","nodesLength","setState","loading","startIndex","endIndex","loaded","JSON","stringify","className","Component","ReactDOM","render","document","getElementById"],"mappings":"yJAIKA,EAUAC,E,gFAKU,SAASC,EAAT,GAAsD,IAKjDC,EALYC,EAAoC,EAApCA,MAC1BC,EAAO,GAELC,EAAwB,GAS9BC,QAAQC,IAAIJ,GAEZ,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAAK,CACrC,IAAME,EAAOP,EAAMK,GACnB,OAAQE,EAAK,IACX,KAAKX,EAAaY,QAZJT,EAaCQ,EAAK,GAXpBL,EAAQA,EAAQI,OAAS,KAAOT,EAAWY,QAC3C,CAAC,IAAK,OAAQ,QAAQC,SAASX,IAW3BG,EAAQS,KAAKd,EAAWY,QACxBR,GAAI,yBACJA,GAAI,gCACJA,GAAI,4DACJA,GAAQM,EAAK,GACbN,GAAI,SACJA,GAAI,2CAEJC,EAAQS,KAAKd,EAAWe,OACxBX,GAAI,wBACJA,GAAI,2DACJA,GAAQM,EAAK,GACbN,GAAI,SACJA,GAAI,gCAEN,MAEF,KAAKL,EAAaiB,KAChBZ,GAAI,gCAA6BM,EAAK,GAAlC,WACJ,MAEF,KAAKX,EAAakB,aACAZ,EAAQa,QACRlB,EAAWY,QACzBR,GAAI,SACJA,GAAI,SACJA,GAAI,WAEJA,GAAI,SACJA,GAAI,WAMZ,OAAO,yBAAKe,wBAAyB,CAAEC,OAAQhB,M,SArE5CL,O,qBAAAA,I,eAAAA,I,iCAAAA,M,cAUAC,O,iBAAAA,I,oBAAAA,M,SC0FUqB,E,YAhFb,WAAYC,GAAY,IAAD,8BACrB,4CAAMA,KAHRC,kBAEuB,EAGrB,EAAKC,MAAQ,GAEb,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKD,mBANgB,E,gFAUrBE,KAAKC,UAAYD,KAAKC,UAAUF,KAAKC,MACrCA,KAAKJ,aAAe,IAAIM,OAAO,wBAC/BF,KAAKJ,aAAaK,UAAYD,KAAKC,UACnCD,KAAKJ,aAAaO,YAAY,CAC5BC,KAAM,WACNC,SAAUC,OAAOD,SAASE,e,gCAIpBC,GAA0B,IAC1BC,EAAmBT,KAAKH,MAAxBY,eACFC,EAAsBF,EAAEG,KAQ9B,GAPAhC,QAAQC,IAAI,uBAAwB8B,GACf,cAAjBA,EAAQN,MACVJ,KAAKJ,aAAaO,YAAY,CAC5BC,KAAM,cACNQ,IAAK,IAAIC,IAAI,cAAeP,OAAOD,SAASE,YAAYA,aAGvC,YAAjBG,EAAQN,KAAoB,CAC9B,IAAMU,EAAW,CAAC,EAAGC,KAAKC,IAAI,IAAKN,EAAQO,cAC3CjB,KAAKkB,SAAS,CACZC,QAAST,IAGTA,EAAQO,YAAc,KACpBR,GACAK,EAAS,KAAOL,EAAe,IAC/BK,EAAS,KAAOL,EAAe,MAEjC9B,QAAQC,IAAI,aACZoB,KAAKJ,aAAaO,YAAY,CAC5BC,KAAM,oBACNgB,WAAYN,EAAS,GACrBO,SAAUP,EAAS,KAErBd,KAAKkB,SAAS,CACZT,eAAgBK,KAID,WAAjBJ,EAAQN,OACVJ,KAAKkB,SAAS,CACZI,OAAQZ,IAEVV,KAAKJ,aAAaO,YAAY,CAC5BC,KAAM,oBACNgB,WAAY,EACZC,SAAUN,KAAKC,IAAI,IAAKN,EAAQO,gBAGf,uBAAjBP,EAAQN,OACVzB,QAAQC,IAAI2C,KAAKC,UAAUd,EAAQlC,QACnCwB,KAAKkB,SAAS,CACZ1C,MAAOkC,EAAQlC,W,+BAKX,IAAD,EAC4BwB,KAAKH,MAAfrB,GADlB,EACC8C,OADD,EACSH,QADT,EACkB3C,OAEzB,OACE,yBAAKiD,UAAS,iBAAajD,EAAuB,GAAf,eAChCA,GAAS,kBAACF,EAAD,CAAOE,MAAOA,S,GA7EdkD,aCjBlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.c7372be1.chunk.js","sourcesContent":["import React from \"react\";\nimport { NodeTypes } from \"doctored-worker\";\nimport \"./App.css\";\n\nenum NodeTypeEnum {\n  Element = 1,\n  Text = 3,\n  CloseElement = 20\n}\n\ntype Props = {\n  nodes: NodeTypes[];\n};\n\nenum ParentType {\n  block,\n  inline\n}\n\nexport default function Nodes({ nodes }: Props): React.ReactElement {\n  let html = \"\";\n\n  const parents: ParentType[] = [];\n\n  function isInline(nodeName: string) {\n    return (\n      parents[parents.length - 1] === ParentType.inline ||\n      [\"a\", \"span\", \"link\"].includes(nodeName)\n    );\n  }\n\n  console.log(nodes);\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    switch (node[0]) {\n      case NodeTypeEnum.Element: {\n        if (isInline(node[1])) {\n          parents.push(ParentType.inline);\n          html += `<div class=\"d-inline\">`;\n          html += `<div class=\"d-inline__inner\">`;\n          html += `<div class=\"d-inline__button\" role=\"button\" tabindex=\"0\">`;\n          html += node[1];\n          html += `</div>`;\n          html += `<div class=\"d-inline__inner__content\">`;\n        } else {\n          parents.push(ParentType.block);\n          html += `<div class=\"d-block\">`;\n          html += `<div class=\"d-block__button\" role=\"button\" tabindex=\"0\">`;\n          html += node[1];\n          html += `</div>`;\n          html += `<div class=\"d-block__inner\">`;\n        }\n        break;\n      }\n      case NodeTypeEnum.Text: {\n        html += `<span contentEditable>${node[1]}</span>`;\n        break;\n      }\n      case NodeTypeEnum.CloseElement: {\n        const closing = parents.pop();\n        if (closing === ParentType.inline) {\n          html += `</div>`;\n          html += `</div>`;\n          html += `</div>`;\n        } else {\n          html += `</div>`;\n          html += `</div>`;\n        }\n      }\n    }\n  }\n\n  return <div dangerouslySetInnerHTML={{ __html: html }} />;\n}\n","import React, { Component } from \"react\";\nimport {\n  MessageOut,\n  MessageOutLoading,\n  MessageOutLoaded,\n  MessageInInitDoc,\n  MessageInLoad,\n  MessageInGetRange,\n  NodeTypes\n} from \"doctored-worker\";\nimport Nodes from \"./App.utils\";\n\ntype Props = {};\n\ntype State = {\n  loading?: MessageOutLoading | undefined;\n  loaded?: MessageOutLoaded | undefined;\n  nodes?: NodeTypes[] | undefined;\n  requestedRange?: number[];\n};\n\nclass App extends Component<Props, State> {\n  sourceWorker: any;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {};\n\n    this.sourceWorkerInit = this.sourceWorkerInit.bind(this);\n    this.sourceWorkerInit();\n  }\n\n  sourceWorkerInit() {\n    this.onmessage = this.onmessage.bind(this);\n    this.sourceWorker = new Worker(\"./doctored.worker.js\");\n    this.sourceWorker.onmessage = this.onmessage;\n    this.sourceWorker.postMessage({\n      type: \"init-doc\",\n      location: window.location.toString()\n    } as MessageInInitDoc);\n  }\n\n  onmessage(e: { data: MessageOut }) {\n    const { requestedRange } = this.state;\n    const message: MessageOut = e.data;\n    console.log(\"UI Thread Received: \", message);\n    if (message.type === \"doc-ready\") {\n      this.sourceWorker.postMessage({\n        type: \"load-source\",\n        url: new URL(\"./large.xml\", window.location.toString()).toString()\n      } as MessageInLoad);\n    }\n    if (message.type === \"loading\") {\n      const newRange = [0, Math.min(100, message.nodesLength)];\n      this.setState({\n        loading: message\n      });\n      if (\n        message.nodesLength > 0 &&\n        (!requestedRange ||\n          newRange[0] !== requestedRange[0] ||\n          newRange[1] !== requestedRange[1])\n      ) {\n        console.log(\"GET RANGE\");\n        this.sourceWorker.postMessage({\n          type: \"get-range/request\",\n          startIndex: newRange[0],\n          endIndex: newRange[1]\n        } as MessageInGetRange);\n        this.setState({\n          requestedRange: newRange\n        });\n      }\n    }\n    if (message.type === \"loaded\") {\n      this.setState({\n        loaded: message\n      });\n      this.sourceWorker.postMessage({\n        type: \"get-range/request\",\n        startIndex: 0,\n        endIndex: Math.min(100, message.nodesLength)\n      } as MessageInGetRange);\n    }\n    if (message.type === \"get-range/response\") {\n      console.log(JSON.stringify(message.nodes));\n      this.setState({\n        nodes: message.nodes\n      });\n    }\n  }\n\n  render() {\n    const { loaded, loading, nodes } = this.state;\n\n    return (\n      <div className={`d-nodes${!nodes ? \" d-loading\" : \"\"}`}>\n        {nodes && <Nodes nodes={nodes} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}