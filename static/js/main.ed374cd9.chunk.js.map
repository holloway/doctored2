{"version":3,"sources":["source.worker.tsx","App.tsx","functions.utils.tsx","index.tsx"],"names":["SourceWebWorker","saxParser","data","self","message","a","console","log","wasmUrl","URL","location","toString","SAXParser","SaxEventType","Attribute","OpenTag","highWaterMark","fetch","saxWasmResponse","arrayBuffer","saxWasmBuffer","prepareWasm","Uint8Array","eventHandler","event","postMessage","type","reason","url","response","contentLengthBytes","parseInt","headers","get","loadedLengthString","body","Error","bytesRead","reader","getReader","read","chunk","done","end","write","value","length","loadedLengthBytes","onmessage","e","initSax","load","JSON","stringify","Text","ProcessingInstruction","SGMLDeclaration","Doctype","Comment","OpenTagStart","CloseTag","OpenCDATA","Cdata","CloseCDATA","Reader","ptr","cache","this","Position","line","character","nameStart","nameEnd","valueStart","valueEnd","name","readPosition","nameLen","readU32","readString","buffer","valueLen","start","StringReader","Tag","openStart","openEnd","closeStart","closeEnd","attributes","textNodes","selfClosing","numAttrs","i","attrLen","numTextNodes","textLen","events","options","wasmSaxParser","writeBuffer","eventTrap","len","detail","uint8array","memory","slice","Object","defineProperties","set","parser","configurable","enumerable","offset","byteLength","saxWasm","WebAssembly","instantiate","env","memoryBase","tableBase","Memory","initial","table","Table","element","event_listener","result","instance","exports","byteOffset","undefined","global","window","Buffer","from","textDecoder","TextDecoder","decode","uint8Array","App","props","sourceWorker","state","sourceWorkerInit","bind","fn","workerJS","js","startIndex","indexOf","endIndex","lastIndexOf","substring","fnInner","blob","Blob","workerURL","createObjectURL","Worker","InlineWebWorker","SourceWorker","setState","loading","loaded","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ed374cd9.chunk.js","sourcesContent":["/* eslint-disable no-restricted-globals */\n/* eslint-disable no-eval */\n// above rule is disabling 'self' var check.\n\nexport default function SourceWebWorker() {\n  // This function is treated as a web worker.\n\n  let data: string = \"\";\n  let saxParser: SAXParser;\n\n  async function initSax(self: any, message: MessageInInitSax): Promise<void> {\n    console.log(\"initSax\");\n    const wasmUrl = new URL(\"./sax-wasm.wasm\", message.location).toString();\n    saxParser = new SAXParser(SaxEventType.Attribute | SaxEventType.OpenTag, {\n      highWaterMark: 1024 * 1024\n    });\n    const saxWasmResponse = await fetch(wasmUrl);\n    const saxWasmBuffer = await saxWasmResponse.arrayBuffer();\n    const ready = await saxParser.prepareWasm(new Uint8Array(saxWasmBuffer));\n    if (ready) {\n      saxParser.eventHandler = (event: any, data: any) => {\n        // console.log(\"SAX EVENT!\");\n      };\n      self.postMessage({ type: \"sax-ready\" } as MessageOutSaxReady);\n    } else {\n      self.postMessage({\n        type: \"sax-failure\",\n        reason: \"Unable to parser.prepareWasm\"\n      } as MessageOutSaxFailure);\n    }\n  }\n\n  async function load(self: any, message: MessageInLoad): Promise<void> {\n    console.log(\"Loading...\", message.url);\n    try {\n      const response = await fetch(message.url);\n      const contentLengthBytes = parseInt(\n        response.headers.get(\"Content-Length\") || \"-1\",\n        10\n      );\n\n      self.postMessage({\n        type: \"loading\",\n        url: message.url,\n        contentLengthBytes,\n        loadedLengthString: 0\n      } as MessageOutLoading);\n\n      if (!response || !response.body)\n        throw Error(\"Fetch error. Response type = \" + typeof response);\n\n      let bytesRead = 0;\n      const reader = response.body.getReader();\n      while (true) {\n        const chunk = await reader.read();\n        if (chunk.done) {\n          saxParser.end();\n          break;\n        }\n\n        saxParser.write(chunk.value);\n\n        bytesRead += chunk.value ? chunk.value.length : 0;\n        // console.log(\"Bytes\", bytesRead);\n\n        // console.log(\n        //   \"Loading chunk size\",\n        //   chunk.value ? chunk.value.length : \"nothing (done)\"\n        // );\n        // data += chunk.value ? utf8Decoder.decode(chunk.value) : \"\";\n        self.postMessage({\n          type: \"loading\",\n          url: message.url,\n          contentLengthBytes,\n          loadedLengthBytes: bytesRead,\n          loadedLengthString: data.length\n        } as MessageOutLoading);\n      }\n      self.postMessage({\n        type: \"loaded\",\n        url: message.url,\n        contentLengthBytes,\n        loadedLengthBytes: bytesRead,\n        loadedLengthString: data.length\n      } as MessageOutLoaded);\n    } catch (e) {\n      console.log(\"fetch load error\", e);\n    }\n  }\n\n  // @ts-ignore\n  self.onmessage = function(e) {\n    const message: MessageIn = e.data;\n    switch (message.type) {\n      case \"init-sax\": {\n        initSax(self, message);\n        break;\n      }\n      case \"load-source\": {\n        load(self, message);\n        break;\n      }\n      case \"cancel\": {\n        // not supported\n        break;\n      }\n      default: {\n        throw Error(`Unrecognised message ${JSON.stringify(message)}`);\n      }\n    }\n  };\n\n  function throttle(func: Function, delay: number) {\n    let timeout: ReturnType<typeof setTimeout> | null = null;\n    return function(...args: any[]) {\n      if (!timeout) {\n        timeout = setTimeout(() => {\n          // @ts-ignore\n          func.call(this, ...args);\n          timeout = null;\n        }, delay);\n      }\n    };\n  }\n\n  // Following code copied inline from https://www.npmjs.com/package/sax-wasm\n  // It's copied inline so that we can .toString() the function wrapper\n  // and send it to the worker.\n  // Under MIT License\n  // Copyright (c) 2018 Justin Wilaby\n\n  class SaxEventType {\n    // 1\n    public static Text = 0b1;\n    // 2\n    public static ProcessingInstruction = 0b10;\n    // 4\n    public static SGMLDeclaration = 0b100;\n    // 8\n    public static Doctype = 0b1000;\n    // 16\n    public static Comment = 0b10000;\n    // 32\n    public static OpenTagStart = 0b100000;\n    // 64\n    public static Attribute = 0b1000000;\n    // 128\n    public static OpenTag = 0b10000000;\n    // 256\n    public static CloseTag = 0b100000000;\n    // 512\n    public static OpenCDATA = 0b1000000000;\n    // 1024\n    public static Cdata = 0b10000000000;\n    // 2048\n    public static CloseCDATA = 0b100000000000;\n  }\n\n  type Detail = Position | Attribute | Text | Tag | StringReader;\n\n  abstract class Reader<T = Detail> {\n    protected data: Uint8Array;\n    protected cache = {} as { [prop: string]: T };\n    protected ptr: number;\n\n    constructor(data: Uint8Array, ptr: number = 0) {\n      this.data = data;\n      this.ptr = ptr;\n    }\n\n    public abstract toJSON(): { [prop: string]: T };\n    // @ts-ignore\n    public abstract get value();\n  }\n\n  class Position {\n    public line: number;\n    public character: number;\n\n    constructor(line: number, character: number) {\n      this.line = line;\n      this.character = character;\n    }\n  }\n\n  class Attribute extends Reader<string | number | Position> {\n    get nameStart(): Position {\n      return (\n        (this.cache.nameStart as Position) ||\n        (this.cache.nameStart = readPosition(this.data, this.ptr))\n      );\n    }\n\n    get nameEnd(): Position {\n      return (\n        (this.cache.nameEnd as Position) ||\n        (this.cache.nameEnd = readPosition(this.data, this.ptr + 8))\n      );\n    }\n\n    get valueStart(): Position {\n      return (\n        (this.cache.valueStart as Position) ||\n        (this.cache.valueStart = readPosition(this.data, this.ptr + 16))\n      );\n    }\n\n    get valueEnd(): Position {\n      return (\n        (this.cache.valueEnd as Position) ||\n        (this.cache.valueEnd = readPosition(this.data, this.ptr + 24))\n      );\n    }\n\n    get name(): string {\n      if (this.cache.name) {\n        return this.cache.name as string;\n      }\n      const nameLen = readU32(this.data, this.ptr + 32);\n      return (this.cache.name = readString(\n        this.data.buffer,\n        this.ptr + 36,\n        nameLen\n      ));\n    }\n\n    get value(): string {\n      if (this.cache.value) {\n        return this.cache.value as string;\n      }\n      const nameLen = readU32(this.data, this.ptr + 32);\n      const valueLen = readU32(this.data, this.ptr + 36 + nameLen);\n      return (this.cache.value = readString(\n        this.data.buffer,\n        this.ptr + 40 + nameLen,\n        valueLen\n      ));\n    }\n\n    public toJSON(): { [prop: string]: string | number | Position } {\n      const { nameStart, nameEnd, valueStart, valueEnd, name, value } = this;\n      return { nameStart, nameEnd, valueStart, valueEnd, name, value };\n    }\n  }\n\n  class Text extends Reader<string | Position> {\n    get start(): Position {\n      return (\n        (this.cache.start as Position) ||\n        (this.cache.start = readPosition(this.data, this.ptr))\n      );\n    }\n\n    get end(): Position {\n      return (\n        (this.cache.end as Position) ||\n        (this.cache.end = readPosition(this.data, this.ptr + 8))\n      );\n    }\n\n    get value(): string {\n      if (this.cache.value) {\n        return this.cache.value as string;\n      }\n      const valueLen = readU32(this.data, this.ptr + 16);\n      return (this.cache.value = readString(\n        this.data.buffer,\n        this.ptr + 20,\n        valueLen\n      ));\n    }\n\n    public toJSON(): { [prop: string]: string | Position } {\n      const { start, end, value } = this;\n      return { start, end, value };\n    }\n  }\n\n  class StringReader extends Reader<string> {\n    get value(): string {\n      if (this.cache.value) {\n        return this.cache.value as string;\n      }\n      return (this.cache.value = readString(\n        this.data.buffer,\n        this.ptr,\n        this.data.length\n      ));\n    }\n\n    public toJSON(): { [p: string]: string } {\n      return { value: this.value };\n    }\n\n    public toString() {\n      return this.value;\n    }\n  }\n\n  class Tag extends Reader<\n    Attribute[] | Text[] | Position | string | number | boolean\n  > {\n    get openStart(): Position {\n      return (\n        (this.cache.openStart as Position) ||\n        (this.cache.openStart = readPosition(this.data, 0))\n      );\n    }\n\n    get openEnd(): Position {\n      return (\n        (this.cache.openEnd as Position) ||\n        (this.cache.openEnd = readPosition(this.data, 8))\n      );\n    }\n\n    get closeStart(): Position {\n      return (\n        (this.cache.closeStart as Position) ||\n        (this.cache.closeStart = readPosition(this.data, 16))\n      );\n    }\n\n    get closeEnd(): Position {\n      return (\n        (this.cache.closeEnd as Position) ||\n        (this.cache.closeEnd = readPosition(this.data, 24))\n      );\n    }\n\n    get selfClosing(): boolean {\n      return !!this.data[32];\n    }\n\n    get name(): string {\n      if (this.cache.name) {\n        return this.cache.name as string;\n      }\n      const nameLen = readU32(this.data, 33);\n      return (this.cache.name = readString(this.data.buffer, 37, nameLen));\n    }\n\n    get attributes(): Attribute[] {\n      if (this.cache.attributes) {\n        return this.cache.attributes as Attribute[];\n      }\n      // starting location of the attribute block\n      let ptr = readU32(this.data, this.data.length - 8);\n      let numAttrs = readU32(this.data, ptr);\n      ptr += 4;\n      const attributes = [] as Attribute[];\n      for (let i = 0; i < numAttrs; i++) {\n        let attrLen = readU32(this.data, ptr);\n        ptr += 4;\n        attributes[i] = new Attribute(this.data, ptr);\n        ptr += attrLen;\n      }\n      return (this.cache.attributes = attributes);\n    }\n\n    get textNodes(): Text[] {\n      if (this.cache.textNodes) {\n        return this.cache.textNodes as Text[];\n      }\n      // starting location of the text nodes block\n      let ptr = readU32(this.data, this.data.length - 4);\n      let numTextNodes = readU32(this.data, ptr);\n      const textNodes = [] as Text[];\n      ptr += 4;\n      for (let i = 0; i < numTextNodes; i++) {\n        let textLen = readU32(this.data, ptr);\n        ptr += 4;\n        textNodes[i] = new Text(this.data, ptr);\n        ptr += textLen;\n      }\n      return (this.cache.textNodes = textNodes);\n    }\n\n    public toJSON(): {\n      [p: string]: Attribute[] | Text[] | Position | string | number | boolean;\n    } {\n      const {\n        openStart,\n        openEnd,\n        closeStart,\n        closeEnd,\n        name,\n        attributes,\n        textNodes,\n        selfClosing\n      } = this;\n      return {\n        openStart,\n        openEnd,\n        closeStart,\n        closeEnd,\n        name,\n        attributes,\n        textNodes,\n        selfClosing\n      };\n    }\n\n    get value() {\n      return this.name;\n    }\n  }\n\n  interface WasmSaxParser {\n    memory: WebAssembly.Memory;\n    parser: (events: number) => void;\n    write: (pointer: number, length: number) => void;\n    end: () => void;\n  }\n\n  interface SaxParserOptions {\n    highWaterMark: number;\n  }\n\n  class SAXParser {\n    public static textDecoder: TextDecoder; // Web only\n\n    // @ts-ignore\n    public events: number;\n    // @ts-ignore\n    public eventHandler: (type: SaxEventType, detail: Detail) => void;\n\n    private readonly options: SaxParserOptions;\n    // @ts-ignore\n    private wasmSaxParser: WasmSaxParser;\n    // @ts-ignore\n    private writeBuffer: Uint8Array | null;\n\n    constructor(\n      events = 0,\n      options: SaxParserOptions = { highWaterMark: 32 * 1024 }\n    ) {\n      this.options = options;\n      const self = this;\n      Object.defineProperties(this, {\n        events: {\n          get: function() {\n            return ~~events;\n          },\n          set: function(value: number) {\n            events = ~~value;\n            if (self.wasmSaxParser) {\n              self.wasmSaxParser.parser(events);\n            }\n          },\n          configurable: false,\n          enumerable: true\n        }\n      });\n    }\n\n    public write(chunk: Uint8Array, offset: number = 0): void {\n      const {\n        write,\n        memory: { buffer }\n      } = this.wasmSaxParser;\n\n      // Allocations within the WASM process\n      // invalidate reference to the memory buffer.\n      // We check for this and create a new Uint8Array\n      // with the new memory buffer reference if needed.\n      // **NOTE** These allocations can slow down parsing\n      // if they become excessive. Consider adjusting the\n      // highWaterMark in the options up or down to find the optimal\n      // memory allocation to prevent too many new Uint8Array instances.\n      if (!this.writeBuffer || this.writeBuffer.buffer !== buffer) {\n        this.writeBuffer = new Uint8Array(\n          buffer,\n          0,\n          this.options.highWaterMark\n        );\n      }\n      this.writeBuffer.set(chunk);\n      write(offset, chunk.byteLength);\n    }\n\n    public end(): void {\n      this.writeBuffer = null;\n      this.wasmSaxParser.end();\n    }\n\n    public async prepareWasm(saxWasm: Uint8Array): Promise<boolean> {\n      const result = await WebAssembly.instantiate(saxWasm, {\n        env: {\n          memoryBase: 0,\n          tableBase: 0,\n          memory: new WebAssembly.Memory({\n            initial: 32\n          } as WebAssembly.MemoryDescriptor),\n          table: new WebAssembly.Table({\n            initial: 1,\n            element: \"anyfunc\"\n          } as WebAssembly.TableDescriptor),\n          event_listener: this.eventTrap\n        }\n      });\n      if (result) {\n        const { parser } = (this.wasmSaxParser = result.instance.exports);\n        parser(this.events);\n        return true;\n      }\n      throw new Error(`Failed to instantiate the parser.`);\n    }\n\n    protected eventTrap = (event: number, ptr: number, len: number): void => {\n      const uint8array = new Uint8Array(\n        this.wasmSaxParser.memory.buffer.slice(ptr, ptr + len)\n      );\n\n      let detail: Detail;\n      switch (event) {\n        case SaxEventType.Attribute:\n          detail = new Attribute(uint8array);\n          break;\n\n        case SaxEventType.OpenTag:\n        case SaxEventType.CloseTag:\n        case SaxEventType.OpenTagStart:\n          detail = new Tag(uint8array);\n          break;\n\n        case SaxEventType.Text:\n          detail = new Text(uint8array);\n          break;\n\n        case SaxEventType.OpenCDATA:\n          detail = readPosition(uint8array);\n          break;\n\n        default:\n          detail = new StringReader(uint8array);\n          break;\n      }\n\n      this.eventHandler(event, detail);\n    };\n  }\n\n  function readString(\n    data: ArrayBuffer,\n    byteOffset: number,\n    length: number\n  ): string {\n    const env = global || window;\n    // Node\n    if ((env as any).Buffer !== undefined) {\n      return Buffer.from(data, byteOffset, length).toString();\n    }\n    // Web\n    return (\n      SAXParser.textDecoder || (SAXParser.textDecoder = new TextDecoder())\n    ).decode(new Uint8Array(data, byteOffset, length));\n  }\n\n  function readU32(uint8Array: Uint8Array, ptr: number): number {\n    return (\n      (uint8Array[ptr + 3] << 24) |\n      (uint8Array[ptr + 2] << 16) |\n      (uint8Array[ptr + 1] << 8) |\n      uint8Array[ptr]\n    );\n  }\n\n  function readPosition(uint8Array: Uint8Array, ptr: number = 0): Position {\n    const line = readU32(uint8Array, ptr);\n    const character = readU32(uint8Array, ptr + 4);\n    return new Position(line, character);\n  }\n}\n\n// Message In (to web worker)\n\nexport type MessageInInitSax = {\n  type: \"init-sax\";\n  location: string;\n};\n\nexport type MessageInLoad = {\n  type: \"load-source\";\n  url: string;\n};\n\nexport type MessageInCancel = { type: \"cancel\" };\n\nexport type MessageIn = MessageInInitSax | MessageInLoad | MessageInCancel;\n\n// Message Out (from web worker)\n\nexport type MessageOutSaxReady = {\n  type: \"sax-ready\";\n};\n\nexport type MessageOutSaxFailure = {\n  type: \"sax-failure\";\n  reason?: string | undefined;\n};\n\nexport type MessageOutLoading = {\n  type: \"loading\";\n  url: string;\n  contentLengthBytes: number;\n  loadedLengthBytes: number;\n  loadedLengthString: number;\n};\n\nexport type MessageOutLoaded = {\n  type: \"loaded\";\n  url: string;\n  contentLengthBytes: number;\n  loadedLengthBytes: number;\n  loadedLengthString: number;\n};\n\nexport type MessageOut =\n  | MessageOutSaxReady\n  | MessageOutLoading\n  | MessageOutLoaded;\n","import React, { Component } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport SourceWorker, {\n  MessageOut,\n  MessageOutLoading,\n  MessageOutLoaded,\n  MessageInInitSax,\n  MessageInLoad\n} from \"./source.worker\";\nimport { InlineWebWorker } from \"./functions.utils\";\n\ntype Props = {};\n\ntype State = {\n  loading?: MessageOutLoading | undefined;\n  loaded?: MessageOutLoaded | undefined;\n};\n\nclass App extends Component<Props, State> {\n  sourceWorker: any;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {};\n\n    this.sourceWorkerInit = this.sourceWorkerInit.bind(this);\n    this.sourceWorkerInit();\n  }\n\n  sourceWorkerInit() {\n    this.onmessage = this.onmessage.bind(this);\n    this.sourceWorker = InlineWebWorker(SourceWorker);\n    this.sourceWorker.onmessage = this.onmessage;\n    this.sourceWorker.postMessage({\n      type: \"init-sax\",\n      location: window.location.toString()\n    } as MessageInInitSax);\n  }\n\n  onmessage(e: { data: MessageOut }) {\n    const message: MessageOut = e.data;\n    console.log(\"UI Thread Received: \", message);\n    if (message.type === \"sax-ready\") {\n      this.sourceWorker.postMessage({\n        type: \"load-source\",\n        url: new URL(\"./large.xml\", window.location.toString()).toString()\n      } as MessageInLoad);\n    }\n    if (message.type === \"loading\") {\n      this.setState({\n        loading: message\n      });\n    }\n    if (message.type === \"loaded\") {\n      this.setState({\n        loaded: message\n      });\n    }\n  }\n\n  render() {\n    const { loaded, loading } = this.state;\n\n    return (\n      <div>\n        <p>\n          Loading and parsing an 80MB XML file in a background thread using\n          WASM.\n        </p>\n        <p>Open your dev console to see messages between threads.</p>\n        <div>{loading && loading.loadedLengthBytes}</div>\n        <div>{loaded && \"DONE\"}</div>\n      </div>\n    );\n  }\n}\n\nfunction SpringNumber({ number }: { number: number }) {\n  const props = useSpring({ number, from: { number: 0 } });\n  return <animated.span>{Math.abs(props.number)}</animated.span>;\n}\n\nexport default App;\n","/* eslint-disable no-restricted-globals */\n// above rule is disabling 'self' var check.\n\nexport function fnInner(js: string): string {\n  // takes a string of \"function(){ var x; }\" and returns \"var x;\"\n  const startIndex = js.indexOf(\"{\") + 1;\n  const endIndex = js.lastIndexOf(\"}\");\n  return js.substring(startIndex, endIndex);\n}\n\nexport function InlineWebWorker(fn: Function): Worker {\n  const workerJS = fnInner(fn.toString());\n  var blob = new Blob([workerJS], { type: \"text/javascript\" });\n  const workerURL = window.URL.createObjectURL(blob);\n  var worker = new Worker(workerURL);\n  return worker;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}