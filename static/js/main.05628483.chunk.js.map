{"version":3,"sources":["App.utils.tsx","App.tsx","index.tsx"],"names":["NodeTypeEnum","ParentType","Nodes","nodes","html","parents","i","length","node","Element","inline","includes","push","block","Text","CloseElement","pop","dangerouslySetInnerHTML","__html","App","props","sourceWorker","state","sourceWorkerInit","bind","this","onmessage","Worker","postMessage","type","location","window","toString","e","requestedRange","message","data","console","log","url","URL","newRange","Math","min","nodesLength","setState","loading","startIndex","endIndex","loaded","JSON","stringify","className","loadedLengthBytes","Component","ReactDOM","render","document","getElementById"],"mappings":"yJAIKA,EAUAC,E,gFAKU,SAASC,EAAT,GAKb,IALmE,IAArCC,EAAoC,EAApCA,MAC1BC,EAAO,GAELC,EAAwB,GAErBC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAAK,CACrC,IAAME,EAAOL,EAAMG,GACnB,OAAQE,EAAK,IACX,KAAKR,EAAaS,QAEdJ,EAAQA,EAAQE,OAAS,KAAON,EAAWS,QAC3C,CAAC,IAAK,OAAQ,QAAQC,SAASH,EAAK,KAEpCH,EAAQO,KAAKX,EAAWS,QACxBN,GAAI,sHAAmHI,EAAK,GAAxH,kDAEJH,EAAQO,KAAKX,EAAWY,OACxBT,GAAI,uFAAoFI,EAAK,GAAzF,uCAEN,MAEF,KAAKR,EAAac,KAChBV,GAAI,gCAA6BI,EAAK,GAAlC,WACJ,MAEF,KAAKR,EAAae,aACAV,EAAQW,QACRf,EAAWS,OACzBN,GAAQ,qBAERA,GAAQ,gBAMhB,OAAO,yBAAKa,wBAAyB,CAAEC,OAAQd,M,SAnD5CJ,O,qBAAAA,I,eAAAA,I,iCAAAA,M,cAUAC,O,iBAAAA,I,oBAAAA,M,SCqGUkB,E,YA3Fb,WAAYC,GAAY,IAAD,8BACrB,4CAAMA,KAHRC,kBAEuB,EAGrB,EAAKC,MAAQ,GAEb,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKD,mBANgB,E,gFAUrBE,KAAKC,UAAYD,KAAKC,UAAUF,KAAKC,MACrCA,KAAKJ,aAAe,IAAIM,OAAO,wBAC/BF,KAAKJ,aAAaK,UAAYD,KAAKC,UACnCD,KAAKJ,aAAaO,YAAY,CAC5BC,KAAM,WACNC,SAAUC,OAAOD,SAASE,e,gCAIpBC,GAA0B,IAC1BC,EAAmBT,KAAKH,MAAxBY,eACFC,EAAsBF,EAAEG,KAQ9B,GAPAC,QAAQC,IAAI,uBAAwBH,GACf,cAAjBA,EAAQN,MACVJ,KAAKJ,aAAaO,YAAY,CAC5BC,KAAM,cACNU,IAAK,IAAIC,IAAI,cAAeT,OAAOD,SAASE,YAAYA,aAGvC,YAAjBG,EAAQN,KAAoB,CAC9B,IAAMY,EAAW,CAAC,EAAGC,KAAKC,IAAI,IAAKR,EAAQS,cAC3CnB,KAAKoB,SAAS,CACZC,QAASX,IAGTA,EAAQS,YAAc,KACpBV,GACAO,EAAS,KAAOP,EAAe,IAC/BO,EAAS,KAAOP,EAAe,MAEjCG,QAAQC,IAAI,aACZb,KAAKJ,aAAaO,YAAY,CAC5BC,KAAM,oBACNkB,WAAYN,EAAS,GACrBO,SAAUP,EAAS,KAErBhB,KAAKoB,SAAS,CACZX,eAAgBO,KAID,WAAjBN,EAAQN,OACVJ,KAAKoB,SAAS,CACZI,OAAQd,IAEVV,KAAKJ,aAAaO,YAAY,CAC5BC,KAAM,oBACNkB,WAAY,EACZC,SAAUN,KAAKC,IAAI,IAAKR,EAAQS,gBAGf,uBAAjBT,EAAQN,OACVQ,QAAQC,IAAIY,KAAKC,UAAUhB,EAAQhC,QACnCsB,KAAKoB,SAAS,CACZ1C,MAAOgC,EAAQhC,W,+BAKX,IAAD,EAC4BsB,KAAKH,MAAhC2B,EADD,EACCA,OAAQH,EADT,EACSA,QAAS3C,EADlB,EACkBA,MAEzB,OACE,6BACE,+DACA,yBAAKiD,UAAU,SACb,sGAIA,qFAEA,6BAAMN,GAAWA,EAAQO,mBACzB,6BAAMJ,GAAU,SAElB,yBAAKG,UAAU,kBAAkBjD,GAAS,kBAACD,EAAD,CAAOC,MAAOA,U,GAxF9CmD,aCjBlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.05628483.chunk.js","sourcesContent":["import React from \"react\";\nimport { NodeTypes } from \"doctored-worker\";\nimport \"./App.css\";\n\nenum NodeTypeEnum {\n  Element = 1,\n  Text = 3,\n  CloseElement = 20\n}\n\ntype Props = {\n  nodes: NodeTypes[];\n};\n\nenum ParentType {\n  block,\n  inline\n}\n\nexport default function Nodes({ nodes }: Props): React.ReactElement {\n  let html = \"\";\n\n  const parents: ParentType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    switch (node[0]) {\n      case NodeTypeEnum.Element: {\n        if (\n          parents[parents.length - 1] === ParentType.inline ||\n          [\"a\", \"span\", \"link\"].includes(node[1])\n        ) {\n          parents.push(ParentType.inline);\n          html += `<div class=\"d-inline\"><div class=\"d-inline__inner\"><div class=\"d-inline__button\" role=\"button\" tabindex=\"0\">${node[1]}</div><div class=\"d-inline__inner__content\">`;\n        } else {\n          parents.push(ParentType.block);\n          html += `<div class=\"d-block\"><div class=\"d-block__button\" role=\"button\" tabindex=\"0\">${node[1]}</div><div class=\"d-block__inner\">`;\n        }\n        break;\n      }\n      case NodeTypeEnum.Text: {\n        html += `<span contentEditable>${node[1]}</span>`;\n        break;\n      }\n      case NodeTypeEnum.CloseElement: {\n        const closing = parents.pop();\n        if (closing === ParentType.inline) {\n          html += \"</div></div></div>\";\n        } else {\n          html += \"</div></div>\";\n        }\n      }\n    }\n  }\n\n  return <div dangerouslySetInnerHTML={{ __html: html }} />;\n}\n","import React, { Component } from \"react\";\nimport {\n  MessageOut,\n  MessageOutLoading,\n  MessageOutLoaded,\n  MessageInInitDoc,\n  MessageInLoad,\n  MessageInGetRange,\n  NodeTypes\n} from \"doctored-worker\";\nimport Nodes from \"./App.utils\";\n\ntype Props = {};\n\ntype State = {\n  loading?: MessageOutLoading | undefined;\n  loaded?: MessageOutLoaded | undefined;\n  nodes?: NodeTypes[] | undefined;\n  requestedRange?: number[];\n};\n\nclass App extends Component<Props, State> {\n  sourceWorker: any;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {};\n\n    this.sourceWorkerInit = this.sourceWorkerInit.bind(this);\n    this.sourceWorkerInit();\n  }\n\n  sourceWorkerInit() {\n    this.onmessage = this.onmessage.bind(this);\n    this.sourceWorker = new Worker(\"./doctored.worker.js\");\n    this.sourceWorker.onmessage = this.onmessage;\n    this.sourceWorker.postMessage({\n      type: \"init-doc\",\n      location: window.location.toString()\n    } as MessageInInitDoc);\n  }\n\n  onmessage(e: { data: MessageOut }) {\n    const { requestedRange } = this.state;\n    const message: MessageOut = e.data;\n    console.log(\"UI Thread Received: \", message);\n    if (message.type === \"doc-ready\") {\n      this.sourceWorker.postMessage({\n        type: \"load-source\",\n        url: new URL(\"./large.xml\", window.location.toString()).toString()\n      } as MessageInLoad);\n    }\n    if (message.type === \"loading\") {\n      const newRange = [0, Math.min(100, message.nodesLength)];\n      this.setState({\n        loading: message\n      });\n      if (\n        message.nodesLength > 0 &&\n        (!requestedRange ||\n          newRange[0] !== requestedRange[0] ||\n          newRange[1] !== requestedRange[1])\n      ) {\n        console.log(\"GET RANGE\");\n        this.sourceWorker.postMessage({\n          type: \"get-range/request\",\n          startIndex: newRange[0],\n          endIndex: newRange[1]\n        } as MessageInGetRange);\n        this.setState({\n          requestedRange: newRange\n        });\n      }\n    }\n    if (message.type === \"loaded\") {\n      this.setState({\n        loaded: message\n      });\n      this.sourceWorker.postMessage({\n        type: \"get-range/request\",\n        startIndex: 0,\n        endIndex: Math.min(100, message.nodesLength)\n      } as MessageInGetRange);\n    }\n    if (message.type === \"get-range/response\") {\n      console.log(JSON.stringify(message.nodes));\n      this.setState({\n        nodes: message.nodes\n      });\n    }\n  }\n\n  render() {\n    const { loaded, loading, nodes } = this.state;\n\n    return (\n      <div>\n        <header>Doctored 2: XML editor demo</header>\n        <div className=\"intro\">\n          <p>\n            Loading and parsing an 80MB XML file in a background thread using\n            WASM.\n          </p>\n          <p>Open your dev console to see messages between threads.</p>\n\n          <div>{loading && loading.loadedLengthBytes}</div>\n          <div>{loaded && \"DONE\"}</div>\n        </div>\n        <div className=\"doctored-nodes\">{nodes && <Nodes nodes={nodes} />}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// const nodes: NodeTypes[] = [\n//   [1, \"book\", { name: \"head.cmb\" }],\n//   [1, \"title\"],\n//   [3, \"The Doctored Editor\"],\n//   [20],\n//   [1, \"chapter\"],\n//   [3, \"\\n  \"],\n//   [1, \"section\"],\n//   [3, \"\\n   \"],\n//   [1, \"para\"],\n//   [\n//     3,\n//     \"It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey! It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey! It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey! It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey! It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey!\"\n//   ],\n\n//   [1, \"link\"],\n//   [3, \"It was the blurst of times.\"],\n//   [1, \"span\"],\n//   [3, \"Stupid monkey!\"],\n//   [20],\n//   [1, \"span\"],\n//   [3, \"Stupid monkey!\"],\n//   [20],\n//   [20],\n//   [\n//     3,\n//     \"It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey! It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey! It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey! It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey! It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey!\"\n//   ],\n//   [20],\n//   [1, \"para\"],\n//   [3, \"It was the best of times.\"],\n\n//   [1, \"span\"],\n//   [3, \"It was the blurst of times.\"],\n//   [1, \"span\"],\n//   [3, \"Stupid monkey!\"],\n//   [20],\n//   [1, \"span\"],\n//   [3, \"Stupid monkey!\"],\n//   [20],\n//   [20],\n//   [\n//     3,\n//     \"It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey! It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey! It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey! It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey! It was the best of times. It was the blurst of times. Stupid monkey! Stupid monkey!\"\n//   ],\n//   [20],\n\n//   [3, \"\\n            \"]\n// ];\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}