{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","props","sourceWorker","state","sourceWorkerInit","bind","this","onmessage","Worker","postMessage","type","location","window","toString","e","message","data","console","log","url","URL","setState","loading","loaded","loadedLengthBytes","Component","ReactDOM","render","document","getElementById"],"mappings":"0LA4EeA,E,YAzDb,WAAYC,GAAY,IAAD,8BACrB,4CAAMA,KAHRC,kBAEuB,EAGrB,EAAKC,MAAQ,GAEb,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKD,mBANgB,E,gFAUrBE,KAAKC,UAAYD,KAAKC,UAAUF,KAAKC,MACrCA,KAAKJ,aAAe,IAAIM,OAAO,wBAC/BF,KAAKJ,aAAaK,UAAYD,KAAKC,UACnCD,KAAKJ,aAAaO,YAAY,CAC5BC,KAAM,WACNC,SAAUC,OAAOD,SAASE,e,gCAIpBC,GACR,IAAMC,EAAsBD,EAAEE,KAC9BC,QAAQC,IAAI,uBAAwBH,GACf,cAAjBA,EAAQL,MACVJ,KAAKJ,aAAaO,YAAY,CAC5BC,KAAM,cACNS,IAAK,IAAIC,IAAI,cAAeR,OAAOD,SAASE,YAAYA,aAGvC,YAAjBE,EAAQL,MACVJ,KAAKe,SAAS,CACZC,QAASP,IAGQ,WAAjBA,EAAQL,MACVJ,KAAKe,SAAS,CACZE,OAAQR,M,+BAKJ,IAAD,EACqBT,KAAKH,MAAzBoB,EADD,EACCA,OAAQD,EADT,EACSA,QAEhB,OACE,6BACE,sGAIA,qFACA,6BAAMA,GAAWA,EAAQE,mBACzB,6BAAMD,GAAU,a,GAtDNE,aCZlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.afdb5bda.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  MessageOut,\n  MessageOutLoading,\n  MessageOutLoaded,\n  MessageInInitSax,\n  MessageInLoad\n} from \"doctored-worker\";\n\ntype Props = {};\n\ntype State = {\n  loading?: MessageOutLoading | undefined;\n  loaded?: MessageOutLoaded | undefined;\n};\n\nclass App extends Component<Props, State> {\n  sourceWorker: any;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {};\n\n    this.sourceWorkerInit = this.sourceWorkerInit.bind(this);\n    this.sourceWorkerInit();\n  }\n\n  sourceWorkerInit() {\n    this.onmessage = this.onmessage.bind(this);\n    this.sourceWorker = new Worker(\"./doctored.worker.js\");\n    this.sourceWorker.onmessage = this.onmessage;\n    this.sourceWorker.postMessage({\n      type: \"init-sax\",\n      location: window.location.toString()\n    } as MessageInInitSax);\n  }\n\n  onmessage(e: { data: MessageOut }) {\n    const message: MessageOut = e.data;\n    console.log(\"UI Thread Received: \", message);\n    if (message.type === \"sax-ready\") {\n      this.sourceWorker.postMessage({\n        type: \"load-source\",\n        url: new URL(\"./large.xml\", window.location.toString()).toString()\n      } as MessageInLoad);\n    }\n    if (message.type === \"loading\") {\n      this.setState({\n        loading: message\n      });\n    }\n    if (message.type === \"loaded\") {\n      this.setState({\n        loaded: message\n      });\n    }\n  }\n\n  render() {\n    const { loaded, loading } = this.state;\n\n    return (\n      <div>\n        <p>\n          Loading and parsing an 80MB XML file in a background thread using\n          WASM.\n        </p>\n        <p>Open your dev console to see messages between threads.</p>\n        <div>{loading && loading.loadedLengthBytes}</div>\n        <div>{loaded && \"DONE\"}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}